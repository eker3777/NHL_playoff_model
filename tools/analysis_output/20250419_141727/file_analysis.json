{
  "app.py": {
    "imports": [
      "streamlit",
      "os",
      "pandas",
      "traceback"
    ],
    "from_imports": [
      "datetime.datetime",
      "streamlit_app.config.APP_TITLE",
      "streamlit_app.config.APP_VERSION",
      "streamlit_app.config.GITHUB_URL",
      "streamlit_app.config.THEME_COLOR",
      "streamlit_app.config.REFRESH_TIMEZONE",
      "streamlit_app.config.DATA_FOLDER",
      "streamlit_app.config.MODEL_FOLDER",
      "streamlit_app.config.ENABLE_DEBUG_UI",
      "streamlit_app.utils.cache_manager.should_refresh_data",
      "streamlit_app.utils.cache_manager.get_eastern_time",
      "streamlit_app.utils.cache_manager.get_next_refresh_time",
      "streamlit_app.utils.cache_manager.get_cache_status",
      "streamlit_app.utils.data_handlers.update_daily_data",
      "streamlit_app.utils.data_handlers.load_team_data",
      "streamlit_app.utils.data_handlers.format_percentage_for_display",
      "streamlit_app.pages.first_round.show_first_round",
      "streamlit_app.pages.simulation_results.show_simulation_results",
      "streamlit_app.pages.head_to_head.show_head_to_head",
      "streamlit_app.pages.sim_bracket.show_bracket_simulation",
      "streamlit_app.pages.about.show_about",
      "streamlit_app.pages.debug.show_debug"
    ],
    "constants": [],
    "functions": [
      "apply_custom_styling",
      "initialize_session_state",
      "display_sidebar",
      "ensure_folders_exist",
      "main"
    ],
    "function_calls": [
      "st.set_page_config",
      "st.markdown",
      "get_cache_status",
      "get_next_refresh_time",
      "apply_custom_styling",
      "initialize_session_state",
      "ensure_folders_exist",
      "display_sidebar",
      "main",
      "pages.keys",
      "os.makedirs",
      "should_refresh_data",
      "st.spinner",
      "st.error",
      "show_first_round",
      "st.error",
      "st.error",
      "st.code",
      "update_daily_data",
      "st.spinner",
      "update_daily_data",
      "st.spinner",
      "load_team_data",
      "open",
      "f.write",
      "show_simulation_results",
      "traceback.format_exc",
      "open",
      "f.write",
      "pages.keys",
      "last_refresh.strftime",
      "next_refresh.strftime",
      "datetime.now",
      "show_head_to_head",
      "list",
      "datetime.now",
      "open",
      "f.write",
      "datetime.now",
      "datetime.now",
      "str",
      "show_bracket_simulation",
      "str",
      "pages.keys",
      "datetime.now",
      "datetime.now",
      "str",
      "traceback.format_exc",
      "show_about",
      "str",
      "traceback.format_exc",
      "str",
      "show_debug",
      "str",
      "traceback.format_exc",
      "get_eastern_time",
      "get_eastern_time",
      "get_eastern_time"
    ],
    "modules_called": [
      "st",
      "pages",
      "os",
      "f",
      "traceback",
      "last_refresh",
      "next_refresh",
      "datetime"
    ]
  },
  "tests/test_validation.py": {
    "imports": [
      "sys",
      "os",
      "pandas",
      "numpy",
      "streamlit"
    ],
    "from_imports": [
      "streamlit_app.utils.data_validation.validate_data_quality",
      "streamlit_app.utils.data_validation.print_validation_report",
      "streamlit_app.utils.data_validation.validate_and_fix"
    ],
    "constants": [],
    "functions": [
      "create_test_dataframe",
      "test_validation"
    ],
    "function_calls": [
      "pd.DataFrame",
      "print",
      "create_test_dataframe",
      "print",
      "validate_data_quality",
      "print_validation_report",
      "print",
      "validate_data_quality",
      "print_validation_report",
      "print",
      "validate_data_quality",
      "print_validation_report",
      "print",
      "validate_data_quality",
      "print_validation_report",
      "print",
      "validate_and_fix",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "test_validation"
    ],
    "modules_called": [
      "pd"
    ]
  },
  "tests/__init__.py": {
    "imports": [],
    "from_imports": [],
    "constants": [],
    "functions": [],
    "function_calls": [],
    "modules_called": []
  },
  "streamlit_app/__init__.py": {
    "imports": [],
    "from_imports": [],
    "constants": [],
    "functions": [],
    "function_calls": [],
    "modules_called": []
  },
  "streamlit_app/config.py": {
    "imports": [
      "os",
      "pytz"
    ],
    "from_imports": [
      "datetime.time"
    ],
    "constants": [
      "APP_TITLE",
      "APP_VERSION",
      "AUTHOR",
      "GITHUB_URL",
      "HOME_ICE_ADVANTAGE",
      "SERIES_LENGTH_DISTRIBUTION",
      "API_BASE_URL",
      "API_TIMEOUT",
      "API_RETRIES",
      "REFRESH_HOUR",
      "TIMEZONE",
      "CACHE_DURATION",
      "CRITICAL_FEATURES",
      "MODEL_FEATURES",
      "PERCENTAGE_COLUMNS",
      "CONFERENCE_NAMES",
      "DIVISION_NAMES",
      "PLAYOFF_SPOTS_PER_DIVISION",
      "WILDCARDS_PER_CONFERENCE",
      "DEFAULT_SIMULATION_COUNT",
      "MINIMUM_SIMULATION_COUNT",
      "MAXIMUM_SIMULATION_COUNT",
      "TEAM_COLORS",
      "DEBUG_MODE",
      "LOG_LEVEL",
      "MAX_LOG_FILES",
      "MAX_LOG_SIZE",
      "BASE_DIR",
      "DATA_DIR",
      "MODEL_DIR",
      "LOG_DIR"
    ],
    "functions": [],
    "function_calls": [
      "os.makedirs",
      "os.makedirs",
      "os.makedirs"
    ],
    "modules_called": [
      "os"
    ]
  },
  "streamlit_app/components/__init__.py": {
    "imports": [],
    "from_imports": [],
    "constants": [],
    "functions": [],
    "function_calls": [],
    "modules_called": []
  },
  "streamlit_app/utils/validation_utils.py": {
    "imports": [
      "pandas",
      "numpy",
      "streamlit"
    ],
    "from_imports": [
      "streamlit_app.utils.data_validation.validate_and_fix",
      "streamlit_app.utils.data_validation.get_validation_report",
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "check_data_quality",
      "display_validation_metrics",
      "validate_matchup_data",
      "validate_model_compatibility",
      "get_model_feature_importance"
    ],
    "function_calls": [
      "validate_and_fix",
      "sum",
      "sum",
      "sum",
      "st.columns",
      "st.caption",
      "validate_and_fix",
      "st.error",
      "st.success",
      "st.warning",
      "st.error",
      "st.metric",
      "st.metric",
      "st.metric",
      "st.metric",
      "len",
      "len",
      "st.expander",
      "st.info",
      "st.error",
      "st.success",
      "isinstance",
      "len",
      "len",
      "hasattr",
      "hasattr",
      "list",
      "feature_importance.sort",
      "hasattr",
      "hasattr",
      "list",
      "feature_importance.sort",
      "st.warning",
      "st.warning",
      "len",
      "len",
      "zip",
      "zip",
      "len",
      "st.error",
      "st.expander",
      "st.expander",
      "float",
      "float",
      "st.warning",
      "st.info",
      "len",
      "len",
      "st.text",
      "abs",
      "len",
      "len",
      "len",
      "st.error",
      "st.warning",
      "st.info"
    ],
    "modules_called": [
      "st",
      "feature_importance"
    ]
  },
  "streamlit_app/utils/visualization_utils.py": {
    "imports": [
      "pandas",
      "numpy",
      "streamlit",
      "matplotlib.pyplot",
      "pandas",
      "numpy",
      "matplotlib.pyplot",
      "seaborn",
      "plotly.graph_objects",
      "plotly.express",
      "streamlit"
    ],
    "from_imports": [
      "matplotlib.colors.LinearSegmentedColormap",
      "typing.List",
      "typing.Dict",
      "typing.Tuple",
      "typing.Any",
      "plotly.subplots.make_subplots",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Optional",
      "typing.Any",
      "typing.Union",
      "streamlit_app.utils.visualization.plot_win_probability_gauge",
      "streamlit_app.utils.visualization.load_team_logo",
      "streamlit_app.utils.visualization.plot_bracket_simulation_summary"
    ],
    "constants": [],
    "functions": [
      "create_nhl_cmap",
      "create_comparison_metrics",
      "get_valid_metrics",
      "format_percentage",
      "create_scatter_comparison",
      "plot_wins_by_round",
      "calculate_win_percentages",
      "normalize_data",
      "calculate_matchup_stats",
      "create_polar_comparison_chart",
      "create_win_probability_timeline",
      "create_series_outcome_chart",
      "create_bracket_visual",
      "create_team_performance_dashboard",
      "create_advancement_probability_timeline",
      "create_series_simulation_display",
      "display_team_header",
      "display_simulation_summary",
      "interactive_matchup_selector"
    ],
    "function_calls": [
      "sns.set_style",
      "sns.set_palette",
      "LinearSegmentedColormap.from_list",
      "plt.subplots",
      "ax.scatter",
      "team_data.iterrows",
      "ax.set_xlabel",
      "ax.set_ylabel",
      "ax.set_title",
      "ax.axhline",
      "ax.axvline",
      "plt.subplots",
      "ax.bar",
      "ax.set_ylim",
      "ax.set_title",
      "ax.set_ylabel",
      "data.copy",
      "data.copy",
      "sorted",
      "go.Figure",
      "fig.add_trace",
      "fig.add_trace",
      "fig.update_layout",
      "list",
      "go.Figure",
      "fig.add_trace",
      "fig.add_trace",
      "fig.update_layout",
      "fig.add_shape",
      "sum",
      "go.Figure",
      "fig.add_trace",
      "fig.update_layout",
      "go.Figure",
      "len",
      "enumerate",
      "enumerate",
      "fig.update_layout",
      "go.Figure",
      "win_loss_fig.update_layout",
      "go.Figure",
      "goals_fig.add_trace",
      "goals_fig.update_layout",
      "go.Figure",
      "home_away_fig.add_trace",
      "home_away_fig.update_layout",
      "go.Figure",
      "list",
      "fig.update_layout",
      "series_results.get",
      "series_results.get",
      "series_results.get",
      "series_results.get",
      "calculate_matchup_stats",
      "plot_win_probability_gauge",
      "create_series_outcome_chart",
      "team_info.get",
      "team_info.get",
      "team_info.get",
      "st.markdown",
      "st.write",
      "st.subheader",
      "team_advancement.copy",
      "st.dataframe",
      "team_data.sort_values",
      "st.columns",
      "st.warning",
      "st.warning",
      "bar.get_height",
      "ax.text",
      "sum",
      "go.Scatterpolar",
      "go.Scatterpolar",
      "range",
      "go.Scatter",
      "go.Scatter",
      "win_distribution.values",
      "outcomes.append",
      "probabilities.append",
      "colors.append",
      "hover_texts.append",
      "outcomes.append",
      "probabilities.append",
      "colors.append",
      "hover_texts.append",
      "go.Bar",
      "round_data.get",
      "round_data.get",
      "enumerate",
      "round_data.get",
      "fig.add_annotation",
      "final_matchup.get",
      "fig.add_annotation",
      "go.Pie",
      "go.Bar",
      "go.Bar",
      "go.Figure",
      "special_teams_fig.add_trace",
      "special_teams_fig.update_layout",
      "range",
      "fig.add_trace",
      "series_results.get",
      "series_results.get",
      "st.write",
      "st.write",
      "st.warning",
      "sim_results.get",
      "plot_bracket_simulation_summary",
      "st.error",
      "all",
      "st.error",
      "st.subheader",
      "st.selectbox",
      "st.subheader",
      "same_conf_teams.remove",
      "st.selectbox",
      "ax.scatter",
      "ax.text",
      "ax.text",
      "max",
      "dist.values",
      "set",
      "dict",
      "len",
      "dict",
      "min",
      "max",
      "dict",
      "int",
      "int",
      "int",
      "int",
      "dict",
      "matchup.get",
      "matchup.get",
      "matchup.get",
      "fig.add_annotation",
      "fig.add_annotation",
      "dict",
      "dict",
      "dict",
      "isinstance",
      "float",
      "isinstance",
      "float",
      "go.Bar",
      "len",
      "len",
      "go.Scatter",
      "team_info.get",
      "team_info.get",
      "team_info.get",
      "load_team_logo",
      "st.subheader",
      "st.dataframe",
      "st.subheader",
      "st.dataframe",
      "st.subheader",
      "st.dataframe",
      "bar.get_x",
      "sum",
      "set",
      "team2_data.keys",
      "go.Figure",
      "dict",
      "dict",
      "dict",
      "dict",
      "go.Figure",
      "win_distribution.get",
      "win_distribution.get",
      "go.Figure",
      "next_round.get",
      "dict",
      "dict",
      "dict",
      "dict",
      "go.Figure",
      "team_probs.append",
      "team_probs.append",
      "stats.get",
      "st.image",
      "st.subheader",
      "bar.get_width",
      "dist.items",
      "dist.get",
      "dist.get",
      "dist.get",
      "dist.get",
      "team1_data.keys",
      "dict",
      "len",
      "dict",
      "dict",
      "team_info.get",
      "team_info.get",
      "team_info.get",
      "team_info.get",
      "team_info.get",
      "team_info.get",
      "stats.get",
      "stats.get",
      "team_info.get",
      "fig.add_shape",
      "int",
      "dist.items",
      "tuple",
      "tuple",
      "max",
      "next_match.get",
      "next_match.get",
      "team_info.get",
      "team_info.get",
      "team_info.get",
      "team_info.get",
      "latest_results.sort_values",
      "int",
      "len",
      "dict",
      "int",
      "int",
      "team1_color.lstrip",
      "team2_color.lstrip"
    ],
    "modules_called": [
      "sns",
      "LinearSegmentedColormap",
      "plt",
      "ax",
      "team_data",
      "data",
      "go",
      "fig",
      "win_loss_fig",
      "goals_fig",
      "home_away_fig",
      "series_results",
      "team_info",
      "st",
      "team_advancement",
      "bar",
      "win_distribution",
      "outcomes",
      "probabilities",
      "colors",
      "hover_texts",
      "round_data",
      "final_matchup",
      "special_teams_fig",
      "sim_results",
      "same_conf_teams",
      "dist",
      "matchup",
      "team2_data",
      "next_round",
      "team_probs",
      "stats",
      "team1_data",
      "next_match",
      "latest_results",
      "team1_color",
      "team2_color"
    ]
  },
  "streamlit_app/utils/data_validation.py": {
    "imports": [
      "pandas",
      "numpy",
      "streamlit"
    ],
    "from_imports": [
      "typing.List",
      "typing.Dict",
      "typing.Tuple",
      "typing.Any",
      "typing.Optional",
      "typing.Union",
      "datetime.datetime",
      "streamlit_app.config.CRITICAL_FEATURES",
      "streamlit_app.config.PERCENTAGE_COLUMNS"
    ],
    "constants": [],
    "functions": [
      "validate_and_fix",
      "get_validation_report",
      "validate_matchup_data",
      "display_validation_results",
      "validate_team_data",
      "check_data_quality",
      "validate_data_quality",
      "print_validation_report",
      "standardize_percentage"
    ],
    "function_calls": [
      "df.copy",
      "validate_and_fix",
      "validate_and_fix",
      "st.subheader",
      "st.text",
      "st.text",
      "st.text",
      "validate_and_fix",
      "validate_and_fix",
      "print",
      "print",
      "print",
      "print",
      "pd.isna",
      "isinstance",
      "isinstance",
      "len",
      "len",
      "st.success",
      "st.error",
      "st.subheader",
      "enumerate",
      "st.success",
      "st.subheader",
      "enumerate",
      "str",
      "df.select_dtypes",
      "datetime.now",
      "key_cols.items",
      "print",
      "enumerate",
      "print",
      "print",
      "st.text",
      "st.text",
      "len",
      "len",
      "print",
      "sorted",
      "print",
      "len",
      "nan_pcts.items",
      "float",
      "len",
      "non_null_values.min",
      "non_null_values.max",
      "len",
      "float",
      "value.strip",
      "df.isna",
      "len",
      "value.strip",
      "str"
    ],
    "modules_called": [
      "df",
      "st",
      "pd",
      "datetime",
      "key_cols",
      "nan_pcts",
      "non_null_values",
      "value"
    ]
  },
  "streamlit_app/utils/simulation_analysis.py": {
    "imports": [
      "numpy",
      "pandas",
      "matplotlib.pyplot",
      "seaborn",
      "streamlit"
    ],
    "from_imports": [],
    "constants": [],
    "functions": [
      "create_advancement_table",
      "plot_championship_odds",
      "plot_advancement_probabilities",
      "display_matchup_probabilities",
      "analyze_simulation_results"
    ],
    "function_calls": [
      "team_adv.items",
      "pd.DataFrame",
      "df.sort_values",
      "create_advancement_table",
      "adv_table.head",
      "plt.subplots",
      "ax.barh",
      "ax.set_xlabel",
      "ax.set_title",
      "plt.tight_layout",
      "create_advancement_table",
      "adv_table.head",
      "plt.subplots",
      "np.zeros",
      "enumerate",
      "ax.set_xlabel",
      "ax.set_title",
      "ax.legend",
      "ax.invert_yaxis",
      "plt.tight_layout",
      "str",
      "matchups.items",
      "pd.DataFrame",
      "st.subheader",
      "create_advancement_table",
      "st.dataframe",
      "st.subheader",
      "plot_championship_odds",
      "st.pyplot",
      "st.subheader",
      "plot_advancement_probabilities",
      "st.pyplot",
      "st.subheader",
      "display_matchup_probabilities",
      "st.dataframe",
      "st.subheader",
      "display_matchup_probabilities",
      "st.dataframe",
      "st.subheader",
      "display_matchup_probabilities",
      "st.dataframe",
      "st.subheader",
      "st.write",
      "st.write",
      "records.append",
      "bar.get_width",
      "ax.text",
      "len",
      "zip",
      "ax.barh",
      "records.append",
      "df.sort_values",
      "bar.get_y",
      "bar.get_height"
    ],
    "modules_called": [
      "team_adv",
      "pd",
      "df",
      "adv_table",
      "plt",
      "ax",
      "np",
      "matchups",
      "st",
      "records",
      "bar"
    ]
  },
  "streamlit_app/utils/data_handlers.py": {
    "imports": [
      "streamlit",
      "pandas",
      "numpy",
      "os",
      "requests",
      "time",
      "json",
      "nhlpy",
      "subprocess",
      "sys",
      "nhlpy",
      "traceback"
    ],
    "from_imports": [
      "io.BytesIO",
      "datetime.datetime",
      "datetime.timedelta",
      "streamlit_app.config.HOME_ICE_ADVANTAGE",
      "streamlit_app.config.SERIES_LENGTH_DISTRIBUTION",
      "streamlit_app.config.REFRESH_HOUR",
      "streamlit_app.config.TIMEZONE",
      "streamlit_app.config.API_BASE_URL",
      "streamlit_app.config.API_TIMEOUT",
      "streamlit_app.config.CRITICAL_FEATURES",
      "streamlit_app.utils.cache_manager.should_refresh_data",
      "streamlit_app.utils.cache_manager.get_eastern_time",
      "nhlpy.nhl_client.NHLClient",
      "streamlit_app.utils.data_validation.validate_and_fix",
      "nhlpy.nhl_client.NHLClient"
    ],
    "constants": [],
    "functions": [
      "make_request_with_retry",
      "get_standings_data",
      "get_team_stats_data",
      "process_standings_data",
      "process_team_stats_data",
      "get_advanced_stats_data",
      "process_advanced_stats",
      "create_empty_advanced_stats_df",
      "standardize_percentage",
      "standardize_percentage_columns",
      "format_percentage_for_display",
      "engineer_features",
      "add_playoff_history_metrics",
      "calculate_playoff_history",
      "determine_playoff_teams",
      "create_matchup_data",
      "load_data",
      "save_data",
      "update_daily_data",
      "load_team_data",
      "load_current_playoff_matchups",
      "load_simulation_results",
      "calculate_standard_metrics",
      "prepare_data_for_display",
      "validate_and_fix"
    ],
    "function_calls": [
      "st.cache_data",
      "st.cache_data",
      "st.cache_data",
      "st.cache_data",
      "st.cache_data",
      "NHLClient",
      "range",
      "isinstance",
      "pd.DataFrame",
      "isinstance",
      "pd.DataFrame",
      "pd.DataFrame",
      "pd.isna",
      "isinstance",
      "isinstance",
      "df.copy",
      "pd.isna",
      "isinstance",
      "str",
      "combined_data.copy",
      "standardize_percentage_columns",
      "print",
      "print",
      "all",
      "all",
      "all",
      "all",
      "all",
      "all",
      "all",
      "all",
      "all",
      "all",
      "all",
      "all",
      "validate_and_fix",
      "pd.DataFrame",
      "top_seed.get",
      "bottom_seed.get",
      "top_seed.get",
      "bottom_seed.get",
      "pd.DataFrame",
      "print",
      "team_data_df.copy",
      "standardize_percentage_columns",
      "standard_metrics.items",
      "df.copy",
      "st.write",
      "st.error",
      "Exception",
      "make_request_with_retry",
      "st.error",
      "pd.DataFrame",
      "pd.DataFrame",
      "validate_and_fix",
      "st.warning",
      "pd.DataFrame",
      "requests.get",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "pd.read_csv",
      "calculate_playoff_history",
      "pd.merge",
      "dict",
      "current_teams_df.iterrows",
      "st.error",
      "all",
      "st.error",
      "pd.DataFrame",
      "top_seed.get",
      "bottom_seed.get",
      "print",
      "isinstance",
      "validate_and_fix",
      "os.makedirs",
      "isinstance",
      "os.makedirs",
      "should_refresh_data",
      "load_data",
      "update_daily_data",
      "pd.DataFrame",
      "update_daily_data",
      "subprocess.check_call",
      "print",
      "requests.get",
      "response.raise_for_status",
      "make_request_with_retry",
      "make_request_with_retry",
      "st.info",
      "pd.read_csv",
      "st.error",
      "make_request_with_retry",
      "isinstance",
      "st.error",
      "isinstance",
      "st.warning",
      "st.warning",
      "print",
      "os.makedirs",
      "df.to_csv",
      "team_stats.items",
      "all_stats_data.append",
      "stats_df.rename",
      "validate_and_fix",
      "pd.read_csv",
      "df.to_csv",
      "process_advanced_stats",
      "st.warning",
      "create_empty_advanced_stats_df",
      "st.warning",
      "create_empty_advanced_stats_df",
      "df.drop",
      "pd.to_numeric",
      "print",
      "st.info",
      "pd.DataFrame",
      "os.makedirs",
      "dummy_df.to_csv",
      "st.info",
      "st.warning",
      "zip",
      "int",
      "int",
      "team_row.get",
      "range",
      "history_data.append",
      "div_teams.sort_values",
      "range",
      "division_qualifiers.append",
      "wildcard_candidates.append",
      "pd.concat",
      "pd.DataFrame",
      "pd.concat",
      "wildcard_df.sort_values",
      "range",
      "pd.DataFrame",
      "pd.concat",
      "len",
      "st.warning",
      "div_winners.items",
      "sorted_div_winners.sort",
      "datetime.now",
      "print",
      "print",
      "pd.read_csv",
      "st.warning",
      "filename.endswith",
      "print",
      "st.error",
      "st.error",
      "print",
      "st.spinner",
      "get_standings_data",
      "process_standings_data",
      "validate_and_fix",
      "get_team_stats_data",
      "process_team_stats_data",
      "validate_and_fix",
      "validate_and_fix",
      "validate_and_fix",
      "get_advanced_stats_data",
      "pd.read_csv",
      "pd.read_csv",
      "print",
      "pd.DataFrame",
      "print",
      "any",
      "st.error",
      "response.json",
      "st.warning",
      "response.json",
      "st.warning",
      "datetime.now",
      "standings_df.to_dict",
      "response.json",
      "st.info",
      "len",
      "team_record.items",
      "all_standings.append",
      "st.warning",
      "isinstance",
      "stats_df.rename",
      "print",
      "pd.read_csv",
      "open",
      "f.write",
      "len",
      "float",
      "float",
      "len",
      "len",
      "print",
      "len",
      "sorted_div_winners.append",
      "datetime.now",
      "datetime.now",
      "sum",
      "sum",
      "print",
      "len",
      "data.to_json",
      "print",
      "data.to_csv",
      "print",
      "isinstance",
      "isinstance",
      "filename.endswith",
      "st.warning",
      "open",
      "json.load",
      "print",
      "datetime.now",
      "open",
      "json.load",
      "print",
      "datetime.now",
      "open",
      "json.load",
      "open",
      "json.load",
      "isinstance",
      "pd.DataFrame",
      "print",
      "str",
      "st.warning",
      "time.sleep",
      "st.warning",
      "time.sleep",
      "st.warning",
      "datetime.now",
      "datetime.now",
      "datetime.now",
      "alt_response.json",
      "isinstance",
      "datetime.now",
      "team_record.items",
      "all_standings.append",
      "team_record.get",
      "team_record.get",
      "team_record.get",
      "isinstance",
      "isinstance",
      "team_record.get",
      "team_record.items",
      "all_standings.append",
      "max",
      "st.warning",
      "st.warning",
      "isinstance",
      "value.items",
      "rename_dict.items",
      "process_advanced_stats",
      "st.warning",
      "situation.lower",
      "s.lower",
      "value.strip",
      "len",
      "str",
      "str",
      "len",
      "int",
      "sort_columns.append",
      "div_teams.head",
      "sort_columns.append",
      "wildcard_df.head",
      "len",
      "len",
      "print",
      "st.warning",
      "filename.endswith",
      "print",
      "pd.merge",
      "print",
      "validate_and_fix",
      "datetime.now",
      "datetime.now",
      "datetime.now",
      "datetime.now",
      "json.loads",
      "str",
      "datetime.now",
      "datetime.now",
      "str",
      "str",
      "datetime.now",
      "datetime.now",
      "open",
      "json.load",
      "division_record.get",
      "isinstance",
      "team_record.get",
      "team_record.get",
      "team_record.get",
      "isinstance",
      "standings_data.items",
      "team_record.items",
      "all_standings.append",
      "len",
      "str",
      "range",
      "len",
      "range",
      "range",
      "str",
      "len",
      "len",
      "len",
      "len",
      "pd.notna",
      "pd.notna",
      "print",
      "len",
      "str",
      "open",
      "isinstance",
      "print",
      "st.warning",
      "st.error",
      "str",
      "traceback.format_exc",
      "st.warning",
      "print",
      "print",
      "print",
      "engineer_features",
      "add_playoff_history_metrics",
      "validate_and_fix",
      "save_data",
      "get_eastern_time",
      "print",
      "print",
      "print",
      "str",
      "str",
      "str",
      "division_record.get",
      "isinstance",
      "isinstance",
      "value.items",
      "value.items",
      "isinstance",
      "isinstance",
      "isinstance",
      "isinstance",
      "str",
      "len",
      "value.strip",
      "len",
      "len",
      "data.items",
      "json.dump",
      "json.dump",
      "open",
      "json.dump",
      "len",
      "print",
      "validate_and_fix",
      "pd.merge",
      "print",
      "engineer_features",
      "print",
      "calculate_standard_metrics",
      "print",
      "print",
      "add_playoff_history_metrics",
      "validate_and_fix",
      "save_data",
      "determine_playoff_teams",
      "get_eastern_time",
      "print",
      "print",
      "open",
      "f.write",
      "pd.notna",
      "format_percentage_for_display",
      "pd.notna",
      "str",
      "str",
      "len",
      "list",
      "isinstance",
      "list",
      "str",
      "datetime.now",
      "str",
      "range",
      "isinstance",
      "print",
      "print",
      "st.warning",
      "save_data",
      "open",
      "f.write",
      "missing_cols.append",
      "missing_cols.append",
      "pd.merge",
      "print",
      "engineer_features",
      "add_playoff_history_metrics",
      "validate_and_fix",
      "save_data",
      "get_eastern_time",
      "print",
      "standings_data.keys",
      "value.items",
      "standings_data.keys",
      "datetime.now",
      "json.loads",
      "type",
      "type",
      "type",
      "str",
      "len",
      "print",
      "print",
      "str",
      "len",
      "len",
      "print",
      "open",
      "f.write",
      "open",
      "f.write",
      "len",
      "value.to_json",
      "str",
      "len",
      "str",
      "x.isdigit",
      "len",
      "str",
      "len",
      "len",
      "len",
      "int",
      "get_eastern_time"
    ],
    "modules_called": [
      "st",
      "pd",
      "df",
      "combined_data",
      "top_seed",
      "bottom_seed",
      "team_data_df",
      "standard_metrics",
      "requests",
      "current_teams_df",
      "os",
      "subprocess",
      "response",
      "team_stats",
      "all_stats_data",
      "stats_df",
      "dummy_df",
      "team_row",
      "history_data",
      "div_teams",
      "division_qualifiers",
      "wildcard_candidates",
      "wildcard_df",
      "div_winners",
      "sorted_div_winners",
      "datetime",
      "filename",
      "standings_df",
      "team_record",
      "all_standings",
      "f",
      "data",
      "json",
      "time",
      "alt_response",
      "value",
      "rename_dict",
      "situation",
      "s",
      "sort_columns",
      "division_record",
      "standings_data",
      "traceback",
      "missing_cols",
      "x"
    ]
  },
  "streamlit_app/utils/simulation_utils.py": {
    "imports": [
      "numpy",
      "pandas",
      "streamlit"
    ],
    "from_imports": [
      "streamlit_app.config.HOME_ICE_ADVANTAGE",
      "streamlit_app.config.SERIES_LENGTH_DISTRIBUTION"
    ],
    "constants": [],
    "functions": [
      "get_series_schedule",
      "simulate_series_length",
      "determine_top_seed",
      "generate_series_outcome"
    ],
    "function_calls": [
      "team1.get",
      "team2.get"
    ],
    "modules_called": [
      "team1",
      "team2"
    ]
  },
  "streamlit_app/utils/visualization.py": {
    "imports": [
      "streamlit",
      "pandas",
      "numpy",
      "matplotlib.pyplot",
      "seaborn",
      "altair",
      "requests",
      "plotly.express",
      "plotly.graph_objects"
    ],
    "from_imports": [
      "PIL.Image",
      "io.BytesIO",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any"
    ],
    "constants": [
      "DEFAULT_GRAY",
      "COLOR_SIMILARITY_THRESHOLD"
    ],
    "functions": [
      "load_team_logo",
      "get_team_color",
      "plot_series_probabilities",
      "plot_series_length_table",
      "plot_team_comparison",
      "plot_win_probability_gauge",
      "plot_team_stats_comparison",
      "plot_championship_odds",
      "plot_advancement_heatmap",
      "plot_colored_advancement_table",
      "plot_potential_matchups",
      "display_matchup_probabilities_table",
      "_color_distance",
      "plot_head_to_head_probabilities",
      "plot_head_to_head_metrics",
      "create_bracket_visual",
      "create_simple_bracket_visual",
      "display_colored_table",
      "plot_top_teams_chart",
      "create_round_advancement_chart",
      "plot_championship_odds_plotly",
      "plot_bracket_simulation_summary",
      "create_small_multiple_charts",
      "style_df",
      "hex_to_rgb",
      "color_cells"
    ],
    "function_calls": [
      "sns.set_style",
      "sns.set_palette",
      "team_colors.get",
      "plt.subplots",
      "ax.bar",
      "ax.set_ylabel",
      "ax.set_title",
      "ax.set_ylim",
      "ax.axhline",
      "st.pyplot",
      "sum",
      "pd.DataFrame",
      "st.table",
      "pd.DataFrame",
      "pd.melt",
      "st.altair_chart",
      "go.Figure",
      "fig.update_layout",
      "pd.DataFrame",
      "st.table",
      "plt.subplots",
      "ax.barh",
      "enumerate",
      "ax.set_xlabel",
      "ax.set_title",
      "ax.set_xlim",
      "st.pyplot",
      "plt.figure",
      "sns.heatmap",
      "plt.xlabel",
      "plt.ylabel",
      "plt.title",
      "ax.set_xticklabels",
      "plt.xticks",
      "st.pyplot",
      "max_values.keys",
      "st.dataframe",
      "px.bar",
      "fig.update_traces",
      "fig.update_layout",
      "st.plotly_chart",
      "top_matchups.copy",
      "st.subheader",
      "st.table",
      "_color_distance",
      "go.Figure",
      "fig.add_trace",
      "fig.add_trace",
      "fig.update_layout",
      "fig.add_shape",
      "enumerate",
      "st.plotly_chart",
      "go.Figure",
      "fig.add_trace",
      "fig.add_trace",
      "fig.update_layout",
      "st.plotly_chart",
      "playoff_results.get",
      "playoff_results.get",
      "plt.subplots",
      "ax.set_xlim",
      "ax.set_ylim",
      "ax.axis",
      "enumerate",
      "enumerate",
      "enumerate",
      "round_positions.items",
      "st.pyplot",
      "playoff_results.get",
      "bracket_progression.items",
      "df.copy",
      "plt.figure",
      "plt.barh",
      "enumerate",
      "plt.xlabel",
      "plt.tight_layout",
      "teams_to_plot.sort_values",
      "plt.figure",
      "np.arange",
      "np.zeros",
      "enumerate",
      "plt.yticks",
      "plt.xlabel",
      "plt.title",
      "plt.legend",
      "plt.tight_layout",
      "go.Figure",
      "top_teams.iterrows",
      "fig.update_layout",
      "st.subheader",
      "most_common_bracket.get",
      "most_common_bracket.get",
      "st.write",
      "most_common_bracket.get",
      "len",
      "range",
      "requests.get",
      "team_abbrev.upper",
      "bar.get_height",
      "ax.annotate",
      "win_distribution.values",
      "st.warning",
      "st.warning",
      "get_team_color",
      "get_team_color",
      "go.Indicator",
      "bar.get_width",
      "ax.text",
      "plt.gcf",
      "styled_df.applymap",
      "st.info",
      "display_df.rename",
      "display_df.rename",
      "hex_color.lstrip",
      "tuple",
      "color1.startswith",
      "color2.startswith",
      "models.append",
      "probs.append",
      "get_team_color",
      "get_team_color",
      "go.Bar",
      "go.Bar",
      "go.Scatterpolar",
      "go.Scatterpolar",
      "st.error",
      "matchup.get",
      "ax.text",
      "ax.text",
      "matchup.get",
      "team_positions.get",
      "ax.text",
      "ax.text",
      "matchup.get",
      "matchup.get",
      "team_positions.get",
      "ax.text",
      "ax.text",
      "matchup.get",
      "team_positions.get",
      "ax.text",
      "ax.text",
      "ax.text",
      "ax.text",
      "st.error",
      "st.subheader",
      "st.columns",
      "enumerate",
      "st.subheader",
      "pd.DataFrame",
      "st.table",
      "cmap",
      "st.error",
      "x_values.max",
      "plt.text",
      "plt.title",
      "plt.title",
      "len",
      "len",
      "zip",
      "plt.barh",
      "row.get",
      "get_team_color",
      "fig.add_trace",
      "st.warning",
      "st.columns",
      "enumerate",
      "st.columns",
      "range",
      "dict",
      "results_df.sort_values",
      "results_df.sort_values",
      "results_df.sort_values",
      "matchups_df.sort_values",
      "dict",
      "dict",
      "matchups_df.sort_values",
      "tuple",
      "hex_to_rgb",
      "tuple",
      "hex_to_rgb",
      "sum",
      "dict",
      "dict",
      "dict",
      "dict",
      "dict",
      "dict",
      "fig.add_annotation",
      "fig.add_annotation",
      "fig.add_annotation",
      "fig.add_annotation",
      "team1_values.append",
      "team2_values.append",
      "dict",
      "len",
      "min",
      "path_data.append",
      "teams_to_plot.sort_values",
      "st.error",
      "results_df.sort_values",
      "go.Bar",
      "dict",
      "dict",
      "min",
      "min",
      "isinstance",
      "logo_url.startswith",
      "BytesIO",
      "Image.open",
      "img.verify",
      "img_data.seek",
      "Image.open",
      "isinstance",
      "float",
      "isinstance",
      "float",
      "float",
      "float",
      "comparison_data.append",
      "dict",
      "dict",
      "comparison_data.append",
      "bar.get_y",
      "style_df",
      "int",
      "len",
      "isinstance",
      "float",
      "isinstance",
      "float",
      "float",
      "float",
      "max",
      "team1_values.append",
      "team2_values.append",
      "dict",
      "dict",
      "len",
      "len",
      "matchup.get",
      "st.markdown",
      "st.write",
      "int",
      "int",
      "int",
      "metric.replace",
      "st.markdown",
      "range",
      "plot_func",
      "st.pyplot",
      "top_val.strip",
      "bottom_val.strip",
      "isinstance",
      "float",
      "isinstance",
      "float",
      "bar.get_height",
      "title.lower",
      "int",
      "int",
      "dict",
      "dict",
      "dict",
      "dict",
      "dict",
      "dict",
      "dict",
      "dict",
      "dict",
      "dict",
      "val1.strip",
      "val2.strip",
      "abs",
      "abs",
      "team1_values.append",
      "team2_values.append",
      "dict",
      "st.write",
      "st.markdown",
      "color_cells",
      "bar.get_x",
      "len",
      "val1.strip",
      "val2.strip",
      "max",
      "zip",
      "len",
      "result.split",
      "bar.get_width",
      "alt.X",
      "alt.Y",
      "alt.Color",
      "dict",
      "dict",
      "metric.replace",
      "len",
      "st.markdown",
      "st.text",
      "team1_data.get",
      "team2_data.get",
      "color1.strip",
      "color2.strip",
      "max",
      "alt.Chart",
      "alt.Scale"
    ],
    "modules_called": [
      "sns",
      "team_colors",
      "plt",
      "ax",
      "st",
      "pd",
      "go",
      "fig",
      "max_values",
      "px",
      "top_matchups",
      "playoff_results",
      "round_positions",
      "bracket_progression",
      "df",
      "teams_to_plot",
      "np",
      "top_teams",
      "most_common_bracket",
      "requests",
      "team_abbrev",
      "bar",
      "win_distribution",
      "styled_df",
      "display_df",
      "hex_color",
      "color1",
      "color2",
      "models",
      "probs",
      "matchup",
      "team_positions",
      "x_values",
      "row",
      "results_df",
      "matchups_df",
      "team1_values",
      "team2_values",
      "path_data",
      "logo_url",
      "Image",
      "img",
      "img_data",
      "comparison_data",
      "metric",
      "top_val",
      "bottom_val",
      "title",
      "val1",
      "val2",
      "result",
      "alt",
      "team1_data",
      "team2_data"
    ]
  },
  "streamlit_app/utils/matchup_utils.py": {
    "imports": [
      "pandas",
      "numpy",
      "streamlit",
      "streamlit_app.utils.model_utils",
      "time"
    ],
    "from_imports": [
      "itertools.combinations",
      "streamlit_app.utils.data_validation.validate_and_fix",
      "streamlit_app.config.CRITICAL_FEATURES"
    ],
    "constants": [],
    "functions": [
      "create_matchup_data",
      "generate_all_matchup_combinations",
      "get_matchup_data",
      "analyze_matchup_data"
    ],
    "function_calls": [
      "top_seed.get",
      "bottom_seed.get",
      "pd.DataFrame",
      "list",
      "isinstance",
      "isinstance",
      "pd.DataFrame",
      "set",
      "matchup_dict.items",
      "matchup_dict.items",
      "len",
      "list",
      "isinstance",
      "validate_and_fix",
      "print",
      "combinations",
      "create_matchup_data",
      "create_matchup_data",
      "top_seed.get",
      "str",
      "bottom_seed.get",
      "str",
      "create_matchup_data",
      "len",
      "set",
      "print",
      "isinstance",
      "isinstance",
      "all_features.update",
      "sum",
      "sum",
      "pd.DataFrame",
      "len",
      "len",
      "pd.notna",
      "pd.notna"
    ],
    "modules_called": [
      "top_seed",
      "bottom_seed",
      "pd",
      "matchup_dict",
      "all_features"
    ]
  },
  "streamlit_app/utils/debug_utils.py": {
    "imports": [
      "pandas",
      "numpy",
      "matplotlib.pyplot",
      "seaborn",
      "streamlit",
      "os",
      "time",
      "json",
      "logging",
      "sys",
      "requests",
      "psutil",
      "os",
      "streamlit"
    ],
    "from_imports": [
      "datetime.datetime",
      "streamlit_app.config.HOME_ICE_ADVANTAGE",
      "streamlit_app.config.SERIES_LENGTH_DISTRIBUTION",
      "streamlit_app.config.CRITICAL_FEATURES",
      "streamlit_app.utils.validation_utils.validate_matchup_data",
      "streamlit_app.utils.validation_utils.validate_model_compatibility",
      "streamlit_app.utils.validation_utils.get_model_feature_importance",
      "streamlit_app.utils.cache_manager.get_eastern_time",
      "streamlit_app.utils.model_utils.predict_series",
      "streamlit_app.utils.data_validation.validate_and_fix",
      "streamlit_app.models.simulation.simulate_playoff_bracket",
      "streamlit_app.utils.data_handlers.load_team_data",
      "streamlit_app.utils.model_utils.load_models",
      "streamlit_app.utils.model_utils.create_matchup_data",
      "streamlit_app.utils.model_utils.predict_series_winner",
      "streamlit_app.utils.model_utils.check_matchup_features"
    ],
    "constants": [],
    "functions": [
      "log_debug_message",
      "data_health_dashboard",
      "model_diagnostics_dashboard",
      "matchup_validation_dashboard",
      "simulate_playoff_series_with_diagnostics",
      "create_model_interpretation_graph",
      "create_home_ice_impact_graph",
      "create_convergence_analysis_graph",
      "create_series_outcome_graph",
      "create_feature_heatmap",
      "run_api_connection_test",
      "monitor_memory_usage",
      "create_debug_report",
      "get_data_quality_metrics",
      "analyze_feature_distributions",
      "check_simulation_consistency",
      "check_model_loading",
      "test_matchup_prediction",
      "monitor_data_refresh"
    ],
    "function_calls": [
      "logging.basicConfig",
      "logging.getLogger",
      "models.get",
      "models.get",
      "len",
      "predict_series",
      "standard_results.get",
      "standard_results.get",
      "standard_results.get",
      "len",
      "plt.subplots",
      "enumerate",
      "plt.tight_layout",
      "plt.subplots",
      "ax.plot",
      "ax.axvline",
      "ax.text",
      "ax.axhline",
      "ax.set_xlabel",
      "ax.set_ylabel",
      "ax.set_title",
      "ax.text",
      "plt.tight_layout",
      "plt.subplots",
      "ax.fill_between",
      "ax.plot",
      "ax.axhline",
      "ax.text",
      "ax.axhline",
      "ax.set_xscale",
      "ax.set_xlabel",
      "ax.set_ylabel",
      "ax.set_title",
      "ax.set_ylim",
      "ax.text",
      "plt.tight_layout",
      "plt.subplots",
      "np.arange",
      "ax.set_ylabel",
      "ax.set_title",
      "range",
      "ax.set_xticks",
      "ax.set_xticklabels",
      "ax.legend",
      "sum",
      "ax.text",
      "plt.tight_layout",
      "plt.subplots",
      "sns.heatmap",
      "feature_data.isna",
      "sns.heatmap",
      "ax.set_title",
      "ax.set_xlabel",
      "ax.set_ylabel",
      "ax.set_yticklabels",
      "ax.set_xticklabels",
      "plt.tight_layout",
      "endpoints.items",
      "all",
      "psutil.Process",
      "process.memory_info",
      "psutil.virtual_memory",
      "max",
      "max",
      "len",
      "len",
      "sum",
      "len",
      "any",
      "min",
      "min",
      "plt.subplots",
      "sns.histplot",
      "sns.boxplot",
      "plt.tight_layout",
      "level.lower",
      "logger.debug",
      "sum",
      "float",
      "float",
      "standard_results.get",
      "dict",
      "predict_series",
      "modified_results.get",
      "home_ice_results.append",
      "predict_series",
      "sample_results.get",
      "convergence_results.append",
      "sum",
      "win_dist.items",
      "plt.subplots",
      "ax.text",
      "plt.subplots",
      "ax.text",
      "feature_importance.items",
      "range",
      "ax.barh",
      "ax.set_yticks",
      "ax.set_yticklabels",
      "ax.invert_yaxis",
      "enumerate",
      "ax.set_title",
      "ax.set_xlabel",
      "plt.subplots",
      "ax.text",
      "plt.subplots",
      "ax.text",
      "min",
      "max",
      "max",
      "min",
      "plt.subplots",
      "ax.text",
      "max",
      "ax.bar",
      "enumerate",
      "ax.bar",
      "enumerate",
      "len",
      "all_outcomes.append",
      "plt.subplots",
      "ax.text",
      "plt.subplots",
      "ax.text",
      "time.time",
      "os.getpid",
      "data_health_dashboard",
      "model_diagnostics_dashboard",
      "run_api_connection_test",
      "monitor_memory_usage",
      "matchup_validation_dashboard",
      "len",
      "validate_and_fix",
      "len",
      "load_team_data",
      "log_debug_message",
      "range",
      "log_debug_message",
      "enumerate",
      "champ_probs.items",
      "dict",
      "np.mean",
      "np.mean",
      "load_models",
      "models.get",
      "models.get",
      "create_matchup_data",
      "check_matchup_features",
      "predict_series_winner",
      "models.get",
      "min",
      "time_since_refresh.total_seconds",
      "last_refresh.strftime",
      "logging.FileHandler",
      "logging.StreamHandler",
      "level.lower",
      "logger.info",
      "len",
      "len",
      "len",
      "len",
      "len",
      "len",
      "len",
      "col.endswith",
      "float",
      "modified_results.get",
      "sample_results.get",
      "np.sqrt",
      "win_dist.values",
      "len",
      "ax.text",
      "ax.axvline",
      "min",
      "dict",
      "max",
      "dict",
      "top_seed_outcomes.append",
      "top_seed_probs.append",
      "bottom_seed_outcomes.append",
      "bottom_seed_probs.append",
      "len",
      "len",
      "ax.text",
      "ax.text",
      "dict",
      "pd.DataFrame",
      "feature_data.isna",
      "requests.get",
      "response.raise_for_status",
      "time.time",
      "len",
      "len",
      "len",
      "len",
      "validation_report.get",
      "simulate_playoff_bracket",
      "log_debug_message",
      "len",
      "result_df.iterrows",
      "sorted",
      "log_debug_message",
      "available_models.append",
      "available_models.append",
      "log_debug_message",
      "level.lower",
      "logger.warning",
      "datetime.now",
      "any",
      "datetime.now",
      "isinstance",
      "datetime.now",
      "abs",
      "abs",
      "datetime.now",
      "max",
      "min",
      "abs",
      "len",
      "len",
      "max",
      "max",
      "datetime.now",
      "datetime.now",
      "datetime.now",
      "len",
      "len",
      "len",
      "simulation_results.append",
      "len",
      "consistency.items",
      "str",
      "str",
      "str",
      "level.lower",
      "logger.error",
      "int",
      "float",
      "len",
      "len",
      "len",
      "len",
      "len",
      "len",
      "len",
      "abs",
      "abs",
      "model_name.upper",
      "range",
      "str",
      "data_health_dashboard",
      "model_diagnostics_dashboard",
      "team_data.isna",
      "np.mean",
      "np.std",
      "min",
      "max",
      "consistency.values",
      "consistency.values",
      "min",
      "level.lower",
      "logger.critical",
      "logger.info",
      "len",
      "float",
      "float",
      "float",
      "type",
      "len",
      "hasattr",
      "len",
      "len",
      "len",
      "len",
      "abs",
      "models.get",
      "max",
      "len",
      "len",
      "len",
      "max",
      "min",
      "str",
      "str",
      "model_data.get",
      "hasattr",
      "np.mean",
      "np.std",
      "np.mean",
      "team_data.isna",
      "advanced_stats_df.isna",
      "len",
      "len",
      "sorted",
      "abs",
      "zip",
      "len",
      "len",
      "sorted",
      "float",
      "zip",
      "abs",
      "float"
    ],
    "modules_called": [
      "logging",
      "models",
      "standard_results",
      "plt",
      "ax",
      "np",
      "sns",
      "feature_data",
      "endpoints",
      "psutil",
      "process",
      "level",
      "logger",
      "modified_results",
      "home_ice_results",
      "sample_results",
      "convergence_results",
      "win_dist",
      "feature_importance",
      "all_outcomes",
      "time",
      "os",
      "champ_probs",
      "time_since_refresh",
      "last_refresh",
      "col",
      "top_seed_outcomes",
      "top_seed_probs",
      "bottom_seed_outcomes",
      "bottom_seed_probs",
      "pd",
      "requests",
      "response",
      "validation_report",
      "result_df",
      "available_models",
      "datetime",
      "simulation_results",
      "consistency",
      "model_name",
      "team_data",
      "model_data",
      "advanced_stats_df"
    ]
  },
  "streamlit_app/utils/model_utils.py": {
    "imports": [
      "os",
      "joblib",
      "numpy",
      "pandas",
      "streamlit",
      "sys",
      "subprocess",
      "json",
      "warnings",
      "numpy",
      "numpy",
      "xgboost",
      "streamlit",
      "streamlit",
      "streamlit",
      "streamlit",
      "xgboost"
    ],
    "from_imports": [
      "streamlit_app.config.HOME_ICE_ADVANTAGE",
      "streamlit_app.config.SERIES_LENGTH_DISTRIBUTION",
      "streamlit_app.config.CRITICAL_FEATURES",
      "streamlit_app.config.MODEL_DIR",
      "datetime.datetime",
      "sklearn.linear_model.LogisticRegression"
    ],
    "constants": [
      "HOME_ICE_ADVANTAGE",
      "DEFAULT_WIN_PROBABILITY",
      "SERIES_LENGTH_DISTRIBUTION",
      "X"
    ],
    "functions": [
      "load_models",
      "create_matchup_data",
      "predict_series_winner",
      "check_matchup_features",
      "predict_matchup",
      "predict_series",
      "get_series_outcome_distributions",
      "get_raw_model_predictions",
      "predict_lr",
      "predict_xgb",
      "get_prediction_features",
      "predict_lr",
      "predict_xgb",
      "get_model_features",
      "check_pk_scaling_issues",
      "silent_predict_series_winner"
    ],
    "function_calls": [
      "warnings.filterwarnings",
      "os.makedirs",
      "print",
      "print",
      "print",
      "print",
      "print",
      "pd.DataFrame",
      "silent_predict_series_winner",
      "models.get",
      "min",
      "predict_matchup",
      "get_series_outcome_distributions",
      "range",
      "max",
      "min",
      "sum",
      "np.array",
      "enumerate",
      "np.array",
      "feature_dict.items",
      "len",
      "os.listdir",
      "print",
      "print",
      "print",
      "isinstance",
      "top_seed.get",
      "isinstance",
      "bottom_seed.get",
      "isinstance",
      "isinstance",
      "isinstance",
      "top_seed.get",
      "isinstance",
      "bottom_seed.get",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "len",
      "len",
      "len",
      "len",
      "max",
      "np.sqrt",
      "float",
      "print",
      "print",
      "print",
      "print",
      "all",
      "print",
      "print",
      "datetime.now",
      "top_seed.get",
      "bottom_seed.get",
      "print",
      "col.endswith",
      "len",
      "print",
      "print",
      "isinstance",
      "isinstance",
      "models.get",
      "print",
      "len",
      "len",
      "len",
      "len",
      "models.get",
      "len",
      "abs",
      "model.predict",
      "model.predict",
      "feature_diff.get",
      "model.predict",
      "st.error",
      "model.predict",
      "st.error",
      "col.endswith",
      "models.get",
      "float",
      "float",
      "float",
      "subprocess.check_call",
      "print",
      "joblib.load",
      "joblib.load",
      "joblib.load",
      "print",
      "LogisticRegression",
      "np.array",
      "fallback_model.fit",
      "print",
      "datetime.now",
      "datetime.now",
      "sum",
      "sum",
      "print",
      "print",
      "col.endswith",
      "models.get",
      "print",
      "col.endswith",
      "pd.isna",
      "models.get",
      "globals",
      "st.error",
      "globals",
      "st.error",
      "feature_diff.get",
      "abs",
      "abs",
      "abs",
      "models.get",
      "float",
      "print",
      "isinstance",
      "hasattr",
      "print",
      "print",
      "print",
      "isinstance",
      "hasattr",
      "print",
      "print",
      "print",
      "isinstance",
      "default_model.items",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "len",
      "len",
      "hasattr",
      "hasattr",
      "prediction_data.fillna",
      "print",
      "hasattr",
      "hasattr",
      "print",
      "print",
      "print",
      "hasattr",
      "print",
      "print",
      "models.get",
      "print",
      "models.get",
      "hasattr",
      "hasattr",
      "print",
      "hasattr",
      "hasattr",
      "print",
      "hasattr",
      "prediction_data.fillna",
      "str",
      "hasattr",
      "str",
      "models.get",
      "float",
      "f.lower",
      "f.lower",
      "f.lower",
      "f.lower",
      "print",
      "print",
      "hasattr",
      "isinstance",
      "np.array",
      "str",
      "pd.notna",
      "pd.notna",
      "print",
      "len",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "len",
      "print",
      "print",
      "len",
      "len",
      "str",
      "str",
      "list",
      "get_model_features",
      "len",
      "float",
      "predict_lr",
      "float",
      "list",
      "get_model_features",
      "len",
      "float",
      "predict_xgb",
      "float",
      "float",
      "hasattr",
      "hasattr",
      "m.get",
      "print",
      "print",
      "print",
      "print",
      "abs",
      "print",
      "print",
      "lr_model.predict_proba",
      "print",
      "xgb_model.predict_proba",
      "fallback_model.predict_proba",
      "print",
      "print",
      "lr_model.predict_proba",
      "xgb_model.predict_proba",
      "str",
      "str",
      "abs",
      "str",
      "str",
      "float",
      "float",
      "str",
      "str",
      "str",
      "str",
      "str",
      "matchup_data.get",
      "print",
      "col.endswith",
      "len",
      "len",
      "col.endswith",
      "print",
      "str",
      "np.array",
      "str",
      "col.endswith",
      "str",
      "col.endswith",
      "str",
      "len",
      "len",
      "print",
      "print",
      "str",
      "len",
      "len",
      "len",
      "np.exp",
      "np.exp",
      "len",
      "len",
      "len"
    ],
    "modules_called": [
      "warnings",
      "os",
      "pd",
      "models",
      "np",
      "feature_dict",
      "top_seed",
      "bottom_seed",
      "datetime",
      "col",
      "model",
      "feature_diff",
      "st",
      "subprocess",
      "joblib",
      "fallback_model",
      "default_model",
      "prediction_data",
      "f",
      "m",
      "lr_model",
      "xgb_model",
      "matchup_data"
    ]
  },
  "streamlit_app/utils/__init__.py": {
    "imports": [],
    "from_imports": [],
    "constants": [],
    "functions": [],
    "function_calls": [],
    "modules_called": []
  },
  "streamlit_app/utils/cache_manager.py": {
    "imports": [
      "os",
      "json",
      "pandas",
      "numpy",
      "streamlit",
      "pytz"
    ],
    "from_imports": [
      "datetime.datetime",
      "datetime.timedelta",
      "streamlit_app.config.REFRESH_HOUR",
      "streamlit_app.config.TIMEZONE",
      "streamlit_app.config.CACHE_DURATION",
      "streamlit_app.config.DATA_DIR"
    ],
    "constants": [],
    "functions": [
      "get_eastern_time",
      "should_refresh_data",
      "get_next_refresh_time",
      "cache_simulation_results",
      "load_cached_simulation_results",
      "is_cache_fresh",
      "get_cache_status",
      "display_cache_status"
    ],
    "function_calls": [
      "pytz.timezone",
      "datetime.now",
      "get_eastern_time",
      "print",
      "get_eastern_time",
      "get_eastern_time",
      "isinstance",
      "get_cache_status",
      "print",
      "pytz.timezone",
      "eastern.localize",
      "time_since_refresh.total_seconds",
      "print",
      "print",
      "print",
      "now.replace",
      "os.makedirs",
      "results.items",
      "print",
      "serialized_results.items",
      "print",
      "pytz.timezone",
      "eastern.localize",
      "time_since_cache.total_seconds",
      "get_next_refresh_time",
      "should_refresh_data",
      "now.date",
      "last_refresh.date",
      "now.date",
      "last_refresh.date",
      "isinstance",
      "open",
      "json.dump",
      "print",
      "open",
      "json.load",
      "print",
      "datetime.fromisoformat",
      "now.date",
      "cache_timestamp.date",
      "now.date",
      "cache_timestamp.date",
      "should_refresh_data",
      "len",
      "len",
      "isinstance",
      "matchups.keys",
      "list",
      "st.rerun",
      "value.to_json",
      "isinstance",
      "get_eastern_time",
      "isinstance",
      "value.startswith",
      "datetime.fromisoformat",
      "time_since_refresh.total_seconds",
      "timedelta",
      "value.tolist",
      "isinstance",
      "pd.read_json",
      "datetime.now",
      "value.isoformat",
      "str",
      "str"
    ],
    "modules_called": [
      "pytz",
      "datetime",
      "eastern",
      "time_since_refresh",
      "now",
      "os",
      "results",
      "serialized_results",
      "time_since_cache",
      "last_refresh",
      "json",
      "cache_timestamp",
      "matchups",
      "st",
      "value",
      "pd"
    ]
  },
  "streamlit_app/pages/first_round.py": {
    "imports": [
      "streamlit",
      "pandas",
      "numpy",
      "matplotlib.pyplot",
      "data_handlers",
      "model_utils",
      "os",
      "visualization",
      "plotly.express",
      "plotly.graph_objects"
    ],
    "from_imports": [
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "get_matchup_predictions",
      "get_playoff_matchups",
      "get_matchup_data",
      "display_first_round_matchups",
      "display_metrics_table",
      "app"
    ],
    "function_calls": [
      "st.cache_data",
      "st.cache_data",
      "st.cache_data",
      "model_utils.predict_series_winner",
      "model_utils.predict_matchup",
      "model_utils.predict_series",
      "data_handlers.determine_playoff_teams",
      "data_handlers.create_matchup_data",
      "st.title",
      "pd.DataFrame",
      "st.table",
      "display_first_round_matchups",
      "display_first_round_matchups",
      "st.checkbox",
      "get_playoff_matchups",
      "playoff_matchups.items",
      "table_data.append",
      "datetime.now",
      "st.write",
      "data_handlers.load_data",
      "data_handlers.load_data",
      "st.warning",
      "st.header",
      "matchups.items",
      "st.error",
      "st.exception",
      "st.button",
      "field_name.split",
      "datetime.now",
      "datetime.now",
      "st.error",
      "st.button",
      "st.error",
      "st.exception",
      "get_matchup_data",
      "st.subheader",
      "st.columns",
      "st.write",
      "st.write",
      "st.markdown",
      "abs",
      "st.write",
      "visualization.plot_head_to_head_probabilities",
      "visualization.plot_series_length_table",
      "st.write",
      "any",
      "any",
      "display_metrics_table",
      "st.error",
      "st.spinner",
      "data_handlers.update_daily_data",
      "float",
      "float",
      "abs",
      "st.spinner",
      "data_handlers.update_daily_data",
      "st.columns",
      "get_matchup_predictions",
      "str",
      "st.success",
      "st.experimental_rerun",
      "st.error",
      "float",
      "max",
      "float",
      "max",
      "st.success",
      "data_handlers.load_data",
      "data_handlers.load_data",
      "st.experimental_rerun",
      "st.error",
      "str",
      "st.image",
      "st.image",
      "st.write",
      "st.write",
      "st.write",
      "st.warning",
      "float",
      "float",
      "top_seed.get",
      "top_seed.get",
      "bottom_seed.get",
      "bottom_seed.get",
      "str"
    ],
    "modules_called": [
      "st",
      "model_utils",
      "data_handlers",
      "pd",
      "playoff_matchups",
      "table_data",
      "datetime",
      "matchups",
      "field_name",
      "visualization",
      "top_seed",
      "bottom_seed"
    ]
  },
  "streamlit_app/pages/sim_bracket.py": {
    "imports": [
      "streamlit",
      "pandas",
      "numpy",
      "matplotlib.pyplot",
      "seaborn",
      "json",
      "os",
      "time",
      "simulation",
      "data_handlers",
      "visualization",
      "visualization_utils"
    ],
    "from_imports": [],
    "constants": [],
    "functions": [
      "display_sim_your_bracket",
      "app"
    ],
    "function_calls": [
      "st.title",
      "st.write",
      "model_data.get",
      "data_handlers.load_team_data",
      "data_handlers.load_current_playoff_matchups",
      "st.button",
      "display_bracket_simulator",
      "display_bracket_simulator",
      "st.error",
      "st.error",
      "st.subheader",
      "visualization.create_simple_bracket_visual",
      "st.spinner",
      "simulation.simulate_single_bracket",
      "time.time",
      "st.subheader",
      "time.time",
      "st.success",
      "st.success",
      "st.write",
      "st.write",
      "champion.get",
      "int",
      "int"
    ],
    "modules_called": [
      "st",
      "model_data",
      "data_handlers",
      "visualization",
      "simulation",
      "time",
      "champion"
    ]
  },
  "streamlit_app/pages/head_to_head.py": {
    "imports": [
      "streamlit",
      "pandas",
      "os",
      "model_utils",
      "data_handlers",
      "visualization",
      "numpy"
    ],
    "from_imports": [
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "display_head_to_head_comparison",
      "show_simulation_status",
      "get_simulation_matchup_probability",
      "display_metrics_table",
      "simulate_series",
      "app"
    ],
    "function_calls": [
      "st.header",
      "model_data.get",
      "st.info",
      "st.columns",
      "st.write",
      "matchup_results.items",
      "pd.DataFrame",
      "st.table",
      "max",
      "range",
      "display_head_to_head",
      "display_head_to_head",
      "st.error",
      "st.error",
      "st.markdown",
      "st.selectbox",
      "st.markdown",
      "sorted",
      "st.selectbox",
      "team1_data.keys",
      "team2_data.keys",
      "model_utils.create_matchup_data",
      "st.warning",
      "any",
      "any",
      "any",
      "st.warning",
      "matchup.split",
      "table_data.append",
      "min",
      "isinstance",
      "data_handlers.load_data",
      "isinstance",
      "sorted",
      "visualization.load_team_logo",
      "visualization.load_team_logo",
      "show_simulation_status",
      "st.error",
      "st.error",
      "st.info",
      "st.warning",
      "len",
      "results.get",
      "field_name.split",
      "st.error",
      "st.button",
      "st.error",
      "st.image",
      "st.image",
      "model_utils.predict_series_winner",
      "simulate_series",
      "sum",
      "sum",
      "get_simulation_matchup_probability",
      "st.tabs",
      "st.warning",
      "results.get",
      "abs",
      "datetime.now",
      "pd.isna",
      "pd.isna",
      "isinstance",
      "isinstance",
      "st.subheader",
      "visualization.plot_head_to_head_probabilities",
      "st.columns",
      "st.subheader",
      "display_metrics_table",
      "st.subheader",
      "visualization.plot_series_length_table",
      "st.write",
      "st.write",
      "st.write",
      "st.write",
      "st.write",
      "st.error",
      "st.exception",
      "st.success",
      "st.info",
      "float",
      "float",
      "abs",
      "datetime.now",
      "datetime.now",
      "st.spinner",
      "data_handlers.update_daily_data",
      "len",
      "prediction_results.get",
      "prediction_results.get",
      "prediction_results.get",
      "st.error",
      "st.metric",
      "win_distribution.items",
      "st.metric",
      "max",
      "st.metric",
      "st.write",
      "st.write",
      "st.write",
      "str",
      "float",
      "max",
      "float",
      "max",
      "st.success",
      "st.experimental_rerun",
      "st.error",
      "str",
      "max",
      "win_distribution.items",
      "sum",
      "sum",
      "sum",
      "sum",
      "float",
      "float",
      "int",
      "int",
      "int",
      "int",
      "int",
      "int",
      "sum",
      "team1_data.keys",
      "team1_data.keys",
      "win_distribution.values",
      "win_distribution.values",
      "win_distribution.values",
      "win_distribution.values",
      "str",
      "win_distribution.values",
      "str",
      "str",
      "str",
      "str"
    ],
    "modules_called": [
      "st",
      "model_data",
      "matchup_results",
      "pd",
      "team1_data",
      "team2_data",
      "model_utils",
      "matchup",
      "table_data",
      "data_handlers",
      "visualization",
      "results",
      "field_name",
      "datetime",
      "prediction_results",
      "win_distribution"
    ]
  },
  "streamlit_app/pages/debug.py": {
    "imports": [
      "streamlit",
      "pandas",
      "numpy",
      "matplotlib.pyplot",
      "seaborn",
      "os",
      "sys",
      "json",
      "platform",
      "time",
      "traceback",
      "sklearn",
      "xgboost"
    ],
    "from_imports": [
      "datetime.datetime",
      "datetime.timezone",
      "streamlit_app.utils.data_handlers.*",
      "streamlit_app.utils.data_validation.*",
      "streamlit_app.utils.model_utils.*",
      "streamlit_app.utils.debug_utils.*",
      "streamlit_app.utils.cache_manager.get_eastern_time",
      "streamlit_app.utils.cache_manager.make_datetime_timezone_aware"
    ],
    "constants": [],
    "functions": [
      "display_debug_page",
      "app",
      "highlight_status"
    ],
    "function_calls": [
      "st.title",
      "st.info",
      "st.subheader",
      "st.tabs",
      "display_debug_page",
      "display_debug_page",
      "st.write",
      "get_eastern_time",
      "st.warning",
      "st.write",
      "st.header",
      "st.button",
      "st.subheader",
      "st.header",
      "st.header",
      "load_current_playoff_matchups",
      "st.header",
      "st.subheader",
      "pd.DataFrame",
      "st.dataframe",
      "st.subheader",
      "st.columns",
      "st.subheader",
      "st.subheader",
      "versions.items",
      "make_datetime_timezone_aware",
      "time_since_refresh.total_seconds",
      "st.write",
      "st.write",
      "st.success",
      "st.write",
      "st.warning",
      "st.write",
      "update_daily_data",
      "st.write",
      "get_data_quality_metrics",
      "st.columns",
      "st.checkbox",
      "st.subheader",
      "feature_df.reset_index",
      "feature_df.rename",
      "st.dataframe",
      "st.checkbox",
      "st.checkbox",
      "st.warning",
      "st.subheader",
      "st.write",
      "st.write",
      "st.write",
      "get_model_features",
      "st.subheader",
      "st.error",
      "st.subheader",
      "playoff_matchups.items",
      "st.subheader",
      "pd.DataFrame",
      "plt.subplots",
      "ax.bar",
      "ax.set_xlabel",
      "ax.set_ylabel",
      "ax.set_title",
      "ax.set_xticks",
      "enumerate",
      "st.pyplot",
      "st.subheader",
      "load_models",
      "st.slider",
      "pd.DataFrame",
      "st.dataframe",
      "st.checkbox",
      "st.warning",
      "os.listdir",
      "os.listdir",
      "st.write",
      "st.write",
      "st.write",
      "st.write",
      "platform.python_version",
      "st.write",
      "datetime.utcnow",
      "time_since_refresh.total_seconds",
      "st.success",
      "st.error",
      "st.metric",
      "st.metric",
      "st.metric",
      "st.metric",
      "st.metric",
      "st.metric",
      "validate_and_fix",
      "st.json",
      "st.selectbox",
      "st.selectbox",
      "st.dataframe",
      "model_types.append",
      "model_types.append",
      "st.subheader",
      "st.write",
      "st.checkbox",
      "st.columns",
      "st.button",
      "st.subheader",
      "st.subheader",
      "predict_series_winner",
      "models.get",
      "min",
      "st.columns",
      "st.write",
      "st.metric",
      "st.subheader",
      "predict_series",
      "sum",
      "zip",
      "pd.DataFrame",
      "plt.subplots",
      "ax.bar",
      "ax.bar",
      "ax.set_xlabel",
      "ax.set_ylabel",
      "ax.set_title",
      "ax.legend",
      "st.pyplot",
      "st.checkbox",
      "st.warning",
      "st.write",
      "matchups.items",
      "ax.text",
      "models.get",
      "session_vars.keys",
      "session_vars.values",
      "st.write",
      "st.write",
      "sys.getsizeof",
      "refresh_time.strftime",
      "sim_time.strftime",
      "analyze_feature_distributions",
      "st.pyplot",
      "st.write",
      "st.warning",
      "any",
      "st.write",
      "st.write",
      "st.selectbox",
      "st.write",
      "st.selectbox",
      "create_matchup_data",
      "check_matchup_features",
      "st.write",
      "st.write",
      "st.write",
      "st.write",
      "st.write",
      "st.metric",
      "st.metric",
      "st.metric",
      "outcomes.values",
      "outcome_data.append",
      "outcome_data.append",
      "st.dataframe",
      "st.write",
      "st.spinner",
      "check_simulation_consistency",
      "str",
      "refresh_time.strftime",
      "models.get",
      "st.warning",
      "min",
      "st.success",
      "st.json",
      "isinstance",
      "models.get",
      "len",
      "pd.isna",
      "format_percentage_for_display"
    ],
    "modules_called": [
      "st",
      "pd",
      "versions",
      "time_since_refresh",
      "feature_df",
      "playoff_matchups",
      "plt",
      "ax",
      "os",
      "platform",
      "datetime",
      "model_types",
      "models",
      "matchups",
      "session_vars",
      "sys",
      "refresh_time",
      "sim_time",
      "outcomes",
      "outcome_data"
    ]
  },
  "streamlit_app/pages/simulation_results.py": {
    "imports": [
      "streamlit",
      "pandas",
      "numpy",
      "matplotlib.pyplot",
      "os",
      "sys",
      "altair",
      "streamlit_app.models.simulation",
      "streamlit_app.utils.visualization",
      "streamlit_app.utils.data_handlers"
    ],
    "from_imports": [
      "datetime.datetime",
      "streamlit_app.utils.cache_manager.load_cached_simulation_results",
      "streamlit_app.utils.data_validation.validate_and_fix"
    ],
    "constants": [],
    "functions": [
      "display_simulation_results",
      "app"
    ],
    "function_calls": [
      "st.title",
      "simulation.get_simulation_results",
      "st.tabs",
      "display_simulation_results",
      "display_simulation_results",
      "st.error",
      "st.button",
      "st.caption",
      "st.subheader",
      "results_df.copy",
      "display_df.sort_values",
      "plt.subplots",
      "np.arange",
      "ax.barh",
      "ax.set_yticks",
      "ax.set_yticklabels",
      "ax.invert_yaxis",
      "ax.set_xlabel",
      "ax.set_title",
      "enumerate",
      "st.pyplot",
      "st.subheader",
      "st.dataframe",
      "st.subheader",
      "results_df.copy",
      "st.dataframe",
      "st.subheader",
      "dict",
      "st.altair_chart",
      "st.subheader",
      "plt.subplots",
      "np.array",
      "np.zeros",
      "enumerate",
      "ax.set_xlabel",
      "ax.set_title",
      "ax.legend",
      "ax.grid",
      "plt.tight_layout",
      "plt.xticks",
      "st.pyplot",
      "results_df.copy",
      "round_df.rename",
      "st.subheader",
      "st.dataframe",
      "st.subheader",
      "len",
      "bar.get_width",
      "ax.text",
      "zip",
      "len",
      "ax.barh",
      "np.arange",
      "st.subheader",
      "st.dataframe",
      "st.subheader",
      "st.dataframe",
      "st.subheader",
      "st.dataframe",
      "st.spinner",
      "simulation.update_daily_simulations",
      "st.spinner",
      "simulation.update_daily_simulations",
      "display_df.sort_values",
      "results_df.sort_values",
      "data.append",
      "round_df.sort_values",
      "display_cols.values",
      "st.experimental_rerun",
      "st.success",
      "st.experimental_rerun",
      "st.error",
      "last_refresh.strftime",
      "bar.get_y",
      "results_df.sort_values",
      "bar.get_height",
      "display_cols.keys",
      "alt.X",
      "alt.Y",
      "alt.Color",
      "alt.Tooltip",
      "r2_cols.keys",
      "cf_cols.keys",
      "f_cols.keys",
      "alt.Chart",
      "alt.Axis",
      "alt.Scale",
      "alt.Legend"
    ],
    "modules_called": [
      "st",
      "simulation",
      "results_df",
      "display_df",
      "plt",
      "np",
      "ax",
      "round_df",
      "bar",
      "data",
      "display_cols",
      "last_refresh",
      "alt",
      "r2_cols",
      "cf_cols",
      "f_cols"
    ]
  },
  "streamlit_app/pages/about.py": {
    "imports": [
      "streamlit",
      "pandas",
      "matplotlib.pyplot",
      "seaborn"
    ],
    "from_imports": [
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "display_about_page",
      "app"
    ],
    "function_calls": [
      "st.header",
      "st.markdown",
      "st.subheader",
      "st.markdown",
      "st.subheader",
      "st.markdown",
      "st.subheader",
      "st.markdown",
      "display_about_page",
      "display_about_page",
      "st.subheader",
      "st.write",
      "st.write",
      "st.write",
      "st.write",
      "model_data.get",
      "model_data.get"
    ],
    "modules_called": [
      "st",
      "model_data"
    ]
  },
  "streamlit_app/pages/__init__.py": {
    "imports": [
      "sys"
    ],
    "from_imports": [],
    "constants": [],
    "functions": [],
    "function_calls": [
      "print"
    ],
    "modules_called": []
  },
  "streamlit_app/models/simulation.py": {
    "imports": [
      "streamlit",
      "pandas",
      "numpy",
      "time",
      "streamlit_app.utils.model_utils",
      "os",
      "streamlit_app.utils.data_handlers",
      "streamlit_app.utils.matchup_utils",
      "numpy",
      "pandas",
      "streamlit_app.utils.model_utils",
      "streamlit",
      "streamlit",
      "pandas",
      "numpy",
      "os",
      "json",
      "time",
      "pytz"
    ],
    "from_imports": [
      "datetime.datetime",
      "datetime.timedelta",
      "typing.Dict",
      "typing.List",
      "typing.Tuple",
      "typing.Any",
      "streamlit_app.utils.model_utils.HOME_ICE_ADVANTAGE",
      "datetime.datetime",
      "streamlit_app.utils.model_utils.HOME_ICE_ADVANTAGE",
      "streamlit_app.utils.model_utils.SERIES_LENGTH_DISTRIBUTION",
      "datetime.datetime",
      "streamlit_app.utils.model_utils.load_models",
      "streamlit_app.utils.model_utils.predict_series_winner",
      "streamlit_app.utils.model_utils.create_matchup_data",
      "streamlit_app.utils.data_handlers.load_team_data",
      "streamlit_app.utils.data_handlers.load_current_playoff_matchups",
      "streamlit_app.utils.simulation_utils.generate_series_outcome",
      "streamlit_app.utils.cache_manager.should_refresh_data",
      "streamlit_app.utils.cache_manager.get_eastern_time",
      "streamlit_app.utils.cache_manager.cache_simulation_results",
      "streamlit_app.utils.cache_manager.load_cached_simulation_results"
    ],
    "constants": [
      "HOME_ICE_ADVANTAGE",
      "SERIES_LENGTH_DISTRIBUTION"
    ],
    "functions": [
      "should_refresh_simulations",
      "update_daily_simulations",
      "get_outcome_distributions",
      "simulate_playoff_series",
      "verify_matchup_data",
      "simulate_playoff_bracket",
      "simulate_single_bracket",
      "get_simulation_results",
      "format_simulation_results",
      "simulate_single_bracket",
      "simulate_playoff_bracket",
      "get_home_away_schedule",
      "run_playoff_simulations",
      "simulate_playoff_bracket",
      "predict_series_probability",
      "should_refresh_data",
      "get_eastern_time",
      "cache_simulation_results",
      "load_cached_simulation_results"
    ],
    "function_calls": [
      "int",
      "datetime.utcnow",
      "models.get",
      "min",
      "get_outcome_distributions",
      "range",
      "max",
      "min",
      "playoff_matchups.items",
      "print",
      "playoff_matchups.items",
      "list",
      "matchup_utils.generate_all_matchup_combinations",
      "print",
      "matchup_utils.analyze_matchup_data",
      "print",
      "print",
      "range",
      "pd.DataFrame",
      "team_advancement.items",
      "results_df.sort_values",
      "print",
      "sum",
      "model_usage_stats.items",
      "playoff_matchups.items",
      "playoff_matchups.items",
      "round_1_winners.items",
      "round_2_winners.items",
      "update_daily_simulations",
      "top_teams.copy",
      "playoff_matchups.items",
      "round_1_winners.items",
      "round_2_winners.items",
      "set",
      "playoff_matchups.items",
      "range",
      "team_advancement.items",
      "load_cached_simulation_results",
      "print",
      "load_team_data",
      "load_current_playoff_matchups",
      "load_models",
      "playoff_matchups.items",
      "range",
      "pd.DataFrame",
      "team_advancement.items",
      "results_df.sort_values",
      "create_matchup_data",
      "predict_series_winner",
      "models.get",
      "min",
      "generate_series_outcome",
      "time.time",
      "timedelta",
      "data_handlers.update_daily_data",
      "data_handlers.load_data",
      "data_handlers.load_data",
      "data_handlers.determine_playoff_teams",
      "model_utils.load_models",
      "simulate_playoff_bracket",
      "datetime.now",
      "hasattr",
      "hasattr",
      "np.sqrt",
      "models.get",
      "print",
      "print",
      "print",
      "hasattr",
      "hasattr",
      "print",
      "print",
      "matchups.items",
      "matchups.items",
      "set",
      "playoff_matchups.items",
      "round_1_winners.items",
      "round_2_winners.items",
      "pd.concat",
      "results.update",
      "model_usage_stats.values",
      "print",
      "st.error",
      "matchups.items",
      "matchups.items",
      "set",
      "r1_winners.keys",
      "len",
      "list",
      "data_handlers.load_data",
      "st.error",
      "matchups.items",
      "r1_winners.items",
      "division_matchups.items",
      "len",
      "list",
      "model_utils.create_matchup_data",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "matchups.items",
      "simulate_single_bracket",
      "print",
      "print",
      "print",
      "print",
      "st.spinner",
      "matchups.items",
      "playoff_matchups.items",
      "round_1_winners.items",
      "round_2_winners.items",
      "pd.concat",
      "results.update",
      "top_seed.get",
      "bottom_seed.get",
      "top_seed.get",
      "bottom_seed.get",
      "now.date",
      "datetime.now",
      "datetime.now",
      "st.error",
      "st.error",
      "st.error",
      "st.error",
      "st.error",
      "st.error",
      "st.error",
      "hasattr",
      "hasattr",
      "col.endswith",
      "len",
      "print",
      "playoff_teams.append",
      "playoff_teams.append",
      "print",
      "print",
      "matchups.items",
      "set",
      "r1_winners.keys",
      "len",
      "list",
      "rounds.get",
      "max",
      "pd.DataFrame",
      "pd.DataFrame",
      "pd.DataFrame",
      "pd.DataFrame",
      "pd.DataFrame",
      "pd.DataFrame",
      "model_utils.create_matchup_data",
      "len",
      "list",
      "conf_winners.values",
      "len",
      "model_utils.create_matchup_data",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "get_outcome_distributions",
      "datetime.now",
      "st.warning",
      "st.warning",
      "results_df.sort_values",
      "model_utils.create_matchup_data",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "winner_data.get",
      "len",
      "list",
      "team1.get",
      "team2.get",
      "model_utils.create_matchup_data",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "conference_winners.keys",
      "all_teams.add",
      "all_teams.add",
      "matchup_key.split",
      "datetime.now",
      "simulate_playoff_bracket",
      "cache_simulation_results",
      "print",
      "matchups.items",
      "set",
      "r1_winners.keys",
      "len",
      "list",
      "rounds.get",
      "max",
      "pd.DataFrame",
      "pd.DataFrame",
      "pd.DataFrame",
      "top_seed.get",
      "bottom_seed.get",
      "datetime.now",
      "datetime.now",
      "data_handlers.save_data",
      "st.warning",
      "st.warning",
      "len",
      "len",
      "print",
      "len",
      "len",
      "print",
      "len",
      "matchup_utils.get_matchup_data",
      "len",
      "list",
      "conf_winners.values",
      "len",
      "matchup_utils.get_matchup_data",
      "pd.DataFrame",
      "bracket_results_count.items",
      "model_usage_stats.items",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "get_outcome_distributions",
      "divisions.add",
      "len",
      "model_utils.create_matchup_data",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "get_outcome_distributions",
      "r2_winners.values",
      "len",
      "model_utils.create_matchup_data",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "get_outcome_distributions",
      "int",
      "int",
      "datetime.now",
      "datetime.now",
      "data_handlers.load_data",
      "data_handlers.load_data",
      "data_handlers.load_data",
      "len",
      "sorted",
      "team1.get",
      "team2.get",
      "model_utils.create_matchup_data",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "r2_winners.values",
      "round_data.items",
      "len",
      "datetime.now",
      "print",
      "print",
      "print",
      "print",
      "create_matchup_data",
      "r1_winners.items",
      "len",
      "list",
      "conf_winners.values",
      "len",
      "create_matchup_data",
      "predict_series_winner",
      "models.get",
      "min",
      "pd.DataFrame",
      "get_eastern_time",
      "bracket_results_count.items",
      "now.date",
      "last_refresh.date",
      "data_handlers.save_data",
      "data_handlers.save_data",
      "data_handlers.save_data",
      "st.error",
      "len",
      "len",
      "len",
      "print",
      "len",
      "print",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "divisions.add",
      "len",
      "team1.get",
      "team2.get",
      "matchup_utils.get_matchup_data",
      "r2_winners.values",
      "len",
      "team1.get",
      "team2.get",
      "matchup_utils.get_matchup_data",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "round2_df.sort_values",
      "pd.DataFrame",
      "conf_final_df.sort_values",
      "pd.DataFrame",
      "final_df.sort_values",
      "pd.DataFrame",
      "int",
      "int",
      "k.startswith",
      "int",
      "int",
      "int",
      "int",
      "results.update",
      "st.warning",
      "round_data.get",
      "conf_data.items",
      "open",
      "f.write",
      "predict_series_winner",
      "models.get",
      "min",
      "divisions.add",
      "len",
      "team1.get",
      "team2.get",
      "create_matchup_data",
      "predict_series_winner",
      "models.get",
      "min",
      "r2_winners.values",
      "len",
      "team1.get",
      "team2.get",
      "create_matchup_data",
      "predict_series_winner",
      "models.get",
      "min",
      "current_bracket.append",
      "pd.DataFrame",
      "pd.DataFrame",
      "pd.DataFrame",
      "str",
      "str",
      "lr_model.predict_proba",
      "xgb_model.predict_proba",
      "len",
      "len",
      "current_bracket.append",
      "len",
      "k.startswith",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "model_utils.predict_series_winner",
      "models.get",
      "min",
      "current_bracket.append",
      "data.get",
      "team_data_dict.get",
      "key.split",
      "str",
      "series_id.split",
      "current_bracket.append",
      "key.split",
      "len",
      "divisions.add",
      "k.startswith",
      "div_winners.append",
      "current_bracket.append",
      "current_bracket.append",
      "str",
      "str",
      "len",
      "len",
      "len",
      "len",
      "key.split",
      "current_bracket.append",
      "current_bracket.append",
      "sum",
      "len",
      "datetime.now",
      "str",
      "str",
      "str",
      "str",
      "data.get",
      "k.split",
      "get_eastern_time"
    ],
    "modules_called": [
      "datetime",
      "models",
      "playoff_matchups",
      "matchup_utils",
      "pd",
      "team_advancement",
      "results_df",
      "model_usage_stats",
      "round_1_winners",
      "round_2_winners",
      "top_teams",
      "time",
      "data_handlers",
      "model_utils",
      "np",
      "matchups",
      "results",
      "st",
      "r1_winners",
      "division_matchups",
      "top_seed",
      "bottom_seed",
      "now",
      "col",
      "playoff_teams",
      "rounds",
      "conf_winners",
      "winner_data",
      "team1",
      "team2",
      "conference_winners",
      "all_teams",
      "matchup_key",
      "bracket_results_count",
      "divisions",
      "r2_winners",
      "round_data",
      "last_refresh",
      "round2_df",
      "conf_final_df",
      "final_df",
      "k",
      "conf_data",
      "f",
      "current_bracket",
      "lr_model",
      "xgb_model",
      "data",
      "team_data_dict",
      "key",
      "series_id",
      "div_winners"
    ]
  },
  "streamlit_app/models/__init__.py": {
    "imports": [],
    "from_imports": [],
    "constants": [],
    "functions": [],
    "function_calls": [],
    "modules_called": []
  },
  "tools/dependency_analyzer.py": {
    "imports": [
      "os",
      "sys",
      "ast",
      "networkx",
      "re",
      "json",
      "pydot"
    ],
    "from_imports": [
      "collections.defaultdict",
      "pathlib.Path",
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "__init__",
      "find_python_files",
      "analyze_file",
      "analyze_all_files",
      "_json_serializer",
      "analyze_constants_usage",
      "analyze_function_usage",
      "generate_dependency_graph",
      "generate_report",
      "run_analysis"
    ],
    "function_calls": [
      "DependencyAnalyzer",
      "analyzer.run_analysis",
      "nx.DiGraph",
      "defaultdict",
      "defaultdict",
      "os.walk",
      "dict",
      "print",
      "print",
      "isinstance",
      "TypeError",
      "results.items",
      "constant_sources.items",
      "print",
      "defaultdict",
      "results.items",
      "function_definitions.items",
      "print",
      "nx.DiGraph",
      "print",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "results.items",
      "report.append",
      "report.append",
      "report.append",
      "print",
      "self.find_python_files",
      "self.analyze_all_files",
      "self.analyze_constants_usage",
      "self.analyze_function_usage",
      "self.generate_dependency_graph",
      "self.generate_report",
      "len",
      "len",
      "os.makedirs",
      "ast.parse",
      "ast.walk",
      "self.analyze_file",
      "open",
      "json.dump",
      "list",
      "info.get",
      "info.get",
      "open",
      "json.dump",
      "info.get",
      "info.get",
      "info.get",
      "dict",
      "open",
      "json.dump",
      "dep_graph.add_node",
      "print",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "info.get",
      "info.get",
      "sorted",
      "sum",
      "report.append",
      "open",
      "f.write",
      "file.endswith",
      "open",
      "f.read",
      "isinstance",
      "print",
      "len",
      "next",
      "next",
      "dep_graph.add_edge",
      "print",
      "report.append",
      "report.append",
      "import_counts.items",
      "counts.values",
      "python_files.append",
      "len",
      "isinstance",
      "type",
      "len",
      "len",
      "datetime.now",
      "isinstance",
      "func_call.split",
      "pydot.graph_from_dot_file",
      "len",
      "imp.split",
      "sum",
      "isinstance",
      "str",
      "str",
      "imp.split",
      "isinstance",
      "isinstance",
      "name.isupper",
      "isinstance",
      "isinstance",
      "isinstance"
    ],
    "modules_called": [
      "analyzer",
      "nx",
      "os",
      "results",
      "constant_sources",
      "function_definitions",
      "report",
      "self",
      "ast",
      "json",
      "info",
      "dep_graph",
      "f",
      "file",
      "import_counts",
      "counts",
      "python_files",
      "datetime",
      "func_call",
      "pydot",
      "imp",
      "name"
    ]
  },
  "tools/run_analysis.py": {
    "imports": [
      "os",
      "sys",
      "subprocess",
      "json",
      "importlib"
    ],
    "from_imports": [
      "pathlib.Path",
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "run_analysis"
    ],
    "function_calls": [
      "str",
      "os.makedirs",
      "os.makedirs",
      "print",
      "print",
      "run_analysis",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "Path",
      "datetime.now",
      "print",
      "str",
      "subprocess.run",
      "print",
      "print",
      "str",
      "subprocess.run",
      "print",
      "print",
      "str",
      "subprocess.run",
      "print",
      "print",
      "str",
      "subprocess.run",
      "print",
      "open",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "print",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "Path",
      "Path",
      "Path",
      "Path",
      "open",
      "constants_file.read",
      "open",
      "functions_file.read",
      "content.find",
      "content.find",
      "f.write",
      "f.write",
      "content.find",
      "content.find",
      "f.write",
      "f.write",
      "len",
      "len",
      "datetime.now"
    ],
    "modules_called": [
      "os",
      "datetime",
      "subprocess",
      "f",
      "constants_file",
      "functions_file",
      "content"
    ]
  },
  "tools/analyze_functions.py": {
    "imports": [
      "os",
      "re",
      "sys",
      "ast",
      "json",
      "hashlib"
    ],
    "from_imports": [
      "pathlib.Path",
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "find_python_files",
      "get_function_hash",
      "get_function_signature",
      "extract_functions",
      "generate_report"
    ],
    "function_calls": [
      "os.walk",
      "ast.unparse",
      "re.sub",
      "re.sub",
      "print",
      "find_python_files",
      "print",
      "os.makedirs",
      "print",
      "os.makedirs",
      "generate_report",
      "print",
      "args.append",
      "args.append",
      "args.append",
      "args.append",
      "open",
      "f.read",
      "ast.parse",
      "ast.walk",
      "len",
      "str",
      "len",
      "extract_functions",
      "open",
      "json.dump",
      "open",
      "json.dump",
      "open",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "f.write",
      "all_functions.items",
      "all_func_list.sort",
      "f.write",
      "f.write",
      "f.write",
      "len",
      "str",
      "file.endswith",
      "hashlib.md5",
      "isinstance",
      "print",
      "print",
      "func.get",
      "func.get",
      "duplicated_hashes.items",
      "f.write",
      "sorted",
      "f.write",
      "f.write",
      "function_text.encode",
      "get_function_signature",
      "get_function_hash",
      "ast.get_docstring",
      "functions.append",
      "len",
      "func.get",
      "func.get",
      "func.get",
      "func.get",
      "function_hashes.items",
      "any",
      "f.write",
      "f.write",
      "f.write",
      "all_functions.items",
      "multi_defined.items",
      "f.write",
      "f.write",
      "f.write",
      "all_func_list.append",
      "Path",
      "python_files.append",
      "Path",
      "func.get",
      "len",
      "f.write",
      "len",
      "name.startswith",
      "name.endswith",
      "len",
      "f.write",
      "f.write",
      "f.write",
      "datetime.now",
      "full_path.endswith",
      "full_path.endswith",
      "len",
      "set",
      "datetime.now",
      "len",
      "len"
    ],
    "modules_called": [
      "os",
      "ast",
      "re",
      "args",
      "f",
      "json",
      "all_functions",
      "all_func_list",
      "file",
      "hashlib",
      "func",
      "duplicated_hashes",
      "function_text",
      "functions",
      "function_hashes",
      "multi_defined",
      "python_files",
      "name",
      "datetime",
      "full_path"
    ]
  },
  "tools/constants_validator.py": {
    "imports": [
      "os",
      "re",
      "sys",
      "ast",
      "json"
    ],
    "from_imports": [
      "pathlib.Path",
      "collections.defaultdict",
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "__init__",
      "find_python_files",
      "_get_constant_value",
      "analyze_file_constants",
      "_json_serializer",
      "analyze_all_files",
      "find_config_file",
      "analyze_config_file",
      "generate_constants_report",
      "run_validation"
    ],
    "function_calls": [
      "ConstantsValidator",
      "validator.run_validation",
      "defaultdict",
      "os.walk",
      "dict",
      "print",
      "isinstance",
      "isinstance",
      "isinstance",
      "TypeError",
      "print",
      "self.find_config_file",
      "self.analyze_file_constants",
      "print",
      "config_results.get",
      "report.append",
      "report.append",
      "config_constants.items",
      "report.append",
      "all_results.items",
      "report.append",
      "report.append",
      "defaultdict",
      "all_results.items",
      "print",
      "self.find_python_files",
      "self.analyze_all_files",
      "self.analyze_config_file",
      "self.generate_constants_report",
      "len",
      "len",
      "os.makedirs",
      "isinstance",
      "ast.parse",
      "ast.walk",
      "ast.walk",
      "ast.walk",
      "list",
      "str",
      "self.analyze_file_constants",
      "open",
      "json.dump",
      "rel_path.endswith",
      "print",
      "len",
      "print",
      "open",
      "json.dump",
      "report.append",
      "results.get",
      "rel_path.endswith",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "results.get",
      "report.append",
      "report.append",
      "hardcoded_by_type.items",
      "open",
      "f.write",
      "dict",
      "file.endswith",
      "isinstance",
      "open",
      "f.read",
      "isinstance",
      "print",
      "config_files.append",
      "files_importing_config.append",
      "any",
      "files_not_importing.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "python_files.append",
      "len",
      "isinstance",
      "isinstance",
      "isinstance",
      "isinstance",
      "isinstance",
      "type",
      "len",
      "len",
      "len",
      "report.append",
      "report.append",
      "datetime.now",
      "self._get_constant_value",
      "tuple",
      "isinstance",
      "config_imports.append",
      "isinstance",
      "hasattr",
      "isinstance",
      "isinstance",
      "values.append",
      "self._get_constant_value",
      "zip",
      "isinstance",
      "isinstance",
      "self._get_constant_value",
      "self._get_constant_value",
      "all",
      "str",
      "values.append",
      "self._get_constant_value",
      "self._get_constant_value",
      "elements.append",
      "len",
      "abs",
      "hasattr",
      "isinstance",
      "isinstance",
      "sum"
    ],
    "modules_called": [
      "validator",
      "os",
      "self",
      "config_results",
      "report",
      "config_constants",
      "all_results",
      "ast",
      "json",
      "rel_path",
      "results",
      "hardcoded_by_type",
      "f",
      "file",
      "config_files",
      "files_importing_config",
      "files_not_importing",
      "python_files",
      "datetime",
      "config_imports",
      "values",
      "elements"
    ]
  },
  "tools/function_checker.py": {
    "imports": [
      "os",
      "ast",
      "inspect",
      "json"
    ],
    "from_imports": [
      "collections.defaultdict"
    ],
    "constants": [],
    "functions": [
      "__init__",
      "find_python_files",
      "analyze_function_definitions",
      "analyze_function_calls",
      "_json_serializer",
      "analyze_all_files",
      "check_function_consistency",
      "generate_function_report",
      "run_checks"
    ],
    "function_calls": [
      "FunctionChecker",
      "checker.run_checks",
      "defaultdict",
      "defaultdict",
      "os.walk",
      "dict",
      "print",
      "isinstance",
      "isinstance",
      "TypeError",
      "print",
      "multiple_definitions.items",
      "consistency_checks.get",
      "consistency_checks.get",
      "consistency_checks.get",
      "print",
      "self.find_python_files",
      "self.analyze_all_files",
      "self.check_function_consistency",
      "self.generate_function_report",
      "os.makedirs",
      "ast.parse",
      "ast.walk",
      "ast.parse",
      "defaultdict",
      "ast.walk",
      "dict",
      "list",
      "str",
      "open",
      "json.dump",
      "set",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "multiple_defs.items",
      "report.append",
      "report.append",
      "param_inconsistencies.items",
      "report.append",
      "report.append",
      "call_inconsistencies.items",
      "open",
      "f.write",
      "file.endswith",
      "open",
      "f.read",
      "isinstance",
      "print",
      "open",
      "f.read",
      "isinstance",
      "print",
      "self.analyze_function_definitions",
      "self.analyze_function_calls",
      "len",
      "unique_signatures.add",
      "len",
      "len",
      "set",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "enumerate",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "set",
      "sorted",
      "report.append",
      "python_files.append",
      "len",
      "hasattr",
      "hasattr",
      "ast.get_docstring",
      "isinstance",
      "type",
      "print",
      "list",
      "kwarg_keys.update",
      "len",
      "len",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "report.append",
      "unique_files.add",
      "report.append",
      "hasattr",
      "enumerate",
      "params.append",
      "enumerate",
      "params.append",
      "isinstance",
      "isinstance",
      "list",
      "report.append",
      "params.append",
      "params.append",
      "isinstance",
      "hasattr",
      "params.append",
      "hasattr",
      "hasattr",
      "str",
      "isinstance",
      "args.append",
      "str",
      "hasattr",
      "isinstance",
      "hasattr",
      "isinstance",
      "hasattr",
      "isinstance",
      "args.append",
      "isinstance",
      "str",
      "call.get",
      "len",
      "len",
      "isinstance",
      "hasattr",
      "isinstance",
      "repr",
      "hasattr",
      "args.append",
      "isinstance",
      "args.append",
      "hasattr",
      "len",
      "call.get",
      "hasattr",
      "isinstance",
      "isinstance",
      "repr",
      "args.append",
      "hasattr",
      "isinstance",
      "hasattr",
      "isinstance",
      "isinstance",
      "repr",
      "args.append",
      "args.append",
      "str",
      "isinstance",
      "repr",
      "type",
      "str",
      "type"
    ],
    "modules_called": [
      "checker",
      "os",
      "multiple_definitions",
      "consistency_checks",
      "self",
      "ast",
      "json",
      "report",
      "multiple_defs",
      "param_inconsistencies",
      "call_inconsistencies",
      "f",
      "file",
      "unique_signatures",
      "python_files",
      "kwarg_keys",
      "unique_files",
      "params",
      "args",
      "call"
    ]
  },
  "tools/analyze_imports.py": {
    "imports": [
      "os",
      "re",
      "sys",
      "ast",
      "importlib",
      "json"
    ],
    "from_imports": [
      "pathlib.Path",
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "find_python_files",
      "extract_imports",
      "extract_constants",
      "generate_report"
    ],
    "function_calls": [
      "os.walk",
      "print",
      "find_python_files",
      "print",
      "os.makedirs",
      "print",
      "os.makedirs",
      "generate_report",
      "print",
      "open",
      "f.read",
      "ast.parse",
      "ast.walk",
      "open",
      "f.read",
      "ast.parse",
      "ast.walk",
      "len",
      "str",
      "len",
      "extract_imports",
      "extract_constants",
      "open",
      "json.dump",
      "open",
      "json.dump",
      "open",
      "json.dump",
      "open",
      "f.write",
      "f.write",
      "f.write",
      "sorted",
      "f.write",
      "sorted",
      "f.write",
      "len",
      "str",
      "file.endswith",
      "isinstance",
      "print",
      "print",
      "imp.get",
      "const.get",
      "all_constants.items",
      "set",
      "f.write",
      "f.write",
      "all_imports.items",
      "f.write",
      "f.write",
      "isinstance",
      "isinstance",
      "len",
      "occ.get",
      "len",
      "f.write",
      "f.write",
      "f.write",
      "module.startswith",
      "f.write",
      "Path",
      "full_path.endswith",
      "python_files.append",
      "imports.append",
      "isinstance",
      "Path",
      "const.get",
      "datetime.now",
      "len",
      "occ.get",
      "f.write",
      "len",
      "datetime.now",
      "imports.append",
      "len",
      "len",
      "name.isupper",
      "occ.get",
      "isinstance",
      "constants.append",
      "len",
      "name.upper",
      "isinstance",
      "constants.append",
      "isinstance",
      "isinstance",
      "isinstance",
      "str",
      "ast.dump"
    ],
    "modules_called": [
      "os",
      "f",
      "ast",
      "json",
      "file",
      "imp",
      "const",
      "all_constants",
      "all_imports",
      "occ",
      "module",
      "full_path",
      "python_files",
      "imports",
      "datetime",
      "name",
      "constants"
    ]
  },
  "git/git_pull.py": {
    "imports": [
      "os",
      "sys",
      "subprocess"
    ],
    "from_imports": [
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "run_command",
      "check_for_changes",
      "pull_updates",
      "sync_changes",
      "pull_specific_files"
    ],
    "function_calls": [
      "run_command",
      "bool",
      "print",
      "run_command",
      "branch_output.strip",
      "print",
      "check_for_changes",
      "print",
      "run_command",
      "run_command",
      "print",
      "print",
      "run_command",
      "print",
      "print",
      "run_command",
      "branch_output.strip",
      "print",
      "check_for_changes",
      "print",
      "run_command",
      "run_command",
      "run_command",
      "print",
      "run_command",
      "branch_output.strip",
      "print",
      "print",
      "run_command",
      "print",
      "print",
      "subprocess.run",
      "output.strip",
      "print",
      "print",
      "print",
      "print",
      "run_command",
      "print",
      "run_command",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "int",
      "print",
      "print",
      "run_command",
      "print",
      "print",
      "print",
      "print",
      "int",
      "print",
      "print",
      "run_command",
      "print",
      "print",
      "int",
      "print",
      "print",
      "run_command",
      "print",
      "print",
      "print",
      "print",
      "print",
      "file_path.strip",
      "print",
      "run_command",
      "run_command",
      "diff_check.strip",
      "print",
      "print",
      "run_command",
      "local_changes.strip",
      "run_command",
      "print",
      "print",
      "print",
      "len",
      "pull_specific_files",
      "print",
      "print",
      "print",
      "input",
      "print",
      "print",
      "behind_check.strip",
      "input",
      "behind_check.strip",
      "print",
      "print",
      "print",
      "print",
      "print",
      "ahead_check.strip",
      "print",
      "print",
      "modified_files.append",
      "print",
      "print",
      "print",
      "print",
      "sync_changes",
      "pull_updates",
      "confirm.lower",
      "print",
      "print",
      "behind_check.strip",
      "should_commit.lower",
      "input",
      "print",
      "run_command",
      "print",
      "run_command",
      "print",
      "print",
      "print",
      "print",
      "behind_check.strip",
      "ahead_check.strip",
      "len",
      "input",
      "print",
      "print",
      "choice.lower",
      "print",
      "print",
      "choice.lower",
      "run_command",
      "datetime.now",
      "print",
      "choice.lower",
      "print",
      "specific_files.append",
      "specific_files.append",
      "len"
    ],
    "modules_called": [
      "branch_output",
      "subprocess",
      "output",
      "file_path",
      "diff_check",
      "local_changes",
      "behind_check",
      "ahead_check",
      "modified_files",
      "confirm",
      "should_commit",
      "choice",
      "datetime",
      "specific_files"
    ]
  },
  "git/git_push.py": {
    "imports": [
      "os",
      "sys",
      "subprocess"
    ],
    "from_imports": [
      "datetime.datetime"
    ],
    "constants": [],
    "functions": [
      "run_command",
      "git_status",
      "check_if_behind_remote",
      "check_incoming_changes",
      "selective_pull",
      "pull_changes",
      "push_updates"
    ],
    "function_calls": [
      "run_command",
      "output.splitlines",
      "run_command",
      "branch_output.strip",
      "run_command",
      "run_command",
      "int",
      "run_command",
      "branch_output.strip",
      "run_command",
      "run_command",
      "run_command",
      "branch_output.strip",
      "run_command",
      "print",
      "git_status",
      "print",
      "print",
      "run_command",
      "print",
      "run_command",
      "check_if_behind_remote",
      "print",
      "run_command",
      "print",
      "push_updates",
      "subprocess.run",
      "print",
      "print",
      "behind_check.strip",
      "print",
      "print",
      "run_command",
      "print",
      "print",
      "print",
      "print",
      "print",
      "check_incoming_changes",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "len",
      "print",
      "print",
      "print",
      "modified_files.append",
      "diff_output.splitlines",
      "file.strip",
      "print",
      "print",
      "print",
      "print",
      "print",
      "pull_changes",
      "print",
      "len",
      "datetime.now",
      "print",
      "print",
      "print",
      "behind_check.strip",
      "print",
      "input",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print",
      "f.endswith",
      "selective_pull",
      "print",
      "input",
      "len",
      "print",
      "print",
      "run_command",
      "print",
      "print",
      "print",
      "pull_changes",
      "print",
      "print",
      "len",
      "print",
      "pull_changes",
      "print",
      "print",
      "print",
      "choice.lower"
    ],
    "modules_called": [
      "output",
      "branch_output",
      "subprocess",
      "behind_check",
      "modified_files",
      "diff_output",
      "file",
      "datetime",
      "f",
      "choice"
    ]
  },
  "git/deploy_streamlit.py": {
    "imports": [
      "os",
      "sys",
      "subprocess",
      "argparse",
      "streamlit"
    ],
    "from_imports": [
      "pathlib.Path"
    ],
    "constants": [
      "STREAMLIT_APP_PATH",
      "REQUIREMENTS_FILE"
    ],
    "functions": [
      "run_command",
      "find_venv",
      "check_dependencies",
      "deploy_streamlit",
      "main"
    ],
    "function_calls": [
      "print",
      "run_command",
      "argparse.ArgumentParser",
      "parser.add_argument",
      "parser.add_argument",
      "parser.add_argument",
      "parser.add_argument",
      "parser.parse_args",
      "find_venv",
      "check_dependencies",
      "print",
      "deploy_streamlit",
      "main",
      "Path",
      "subprocess.run",
      "subprocess.run",
      "Path",
      "Path",
      "print",
      "STREAMLIT_APP_PATH.exists",
      "print",
      "print",
      "print",
      "print",
      "print",
      "Path",
      "venv_path.exists",
      "venv_path.exists",
      "print",
      "REQUIREMENTS_FILE.exists",
      "sys.exit",
      "run_command",
      "run_command",
      "print",
      "print",
      "print",
      "print",
      "print",
      "print"
    ],
    "modules_called": [
      "argparse",
      "parser",
      "subprocess",
      "STREAMLIT_APP_PATH",
      "venv_path",
      "REQUIREMENTS_FILE",
      "sys"
    ]
  }
}